/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import dao.ProveedorDAO;
import dao.Conexion;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Proveedor;
import java.sql.Statement;
import java.sql.ResultSet;

/**
 *
 * @author admin
 */
public class JPanelProveedorEditar extends javax.swing.JPanel {

    private int idProveedor;

    /**
     * Creates new form JPanelCategoriaNuevo
     */
    public JPanelProveedorEditar() {
        initComponents();
        this.setSize(new Dimension(900, 400));

        this.cargarProveedoresEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtNombreComercial = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableProveedor = new javax.swing.JTable();
        btnLimpiar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        txtRuc = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Actualizar Proveedores");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("RUC:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, -1));
        add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 290, 190, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Nombre comercial:");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, -1, -1));
        add(txtNombreComercial, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 190, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Telefono:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 270, -1, -1));

        jScrollPane3.setPreferredSize(new java.awt.Dimension(450, 80));

        tableProveedor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Cedula", "Nombre comercial", "Nombre de Contacto", "Telefono", "Email", "Direccion", "Tipo de producto"
            }
        ));
        jScrollPane3.setViewportView(tableProveedor);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 850, 180));

        btnLimpiar.setBackground(new java.awt.Color(204, 204, 255));
        btnLimpiar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 30, 90, 30));

        btnActualizar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/editar-producto.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 30, 140, 30));

        txtRuc.setEditable(false);
        txtRuc.setEnabled(false);
        add(txtRuc, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 190, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Email:");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 320, -1, -1));
        add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 340, 190, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("Dirección:");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 270, -1, -1));
        add(txtDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 290, 420, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.setear();
        this.cargarProveedoresEnTabla();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        Proveedor proveedor = new Proveedor();
        ProveedorDAO controladorProveedor = new ProveedorDAO();

        String ruc = txtRuc.getText().trim();
        String nombreComercial = txtNombreComercial.getText().trim();
        String telefono = txtTelefono.getText().trim();
        String email = txtEmail.getText().trim();
        String direccion = txtDireccion.getText().trim();

        if (!validarCampos(ruc, telefono)) {
            return;
        }

        try {
            int fila = tableProveedor.getSelectedRow();
            if (fila < 0) {
                JOptionPane.showMessageDialog(null, "Seleccione un proveedor de la tabla para actualizar.");
                return;
            }

            idProveedor = Integer.parseInt(tableProveedor.getValueAt(fila, 0).toString());

            proveedor.setIdProveedor(idProveedor); 
            proveedor.setRuc(ruc);
            proveedor.setNombre(nombreComercial.substring(0, 1).toUpperCase() + nombreComercial.substring(1).toLowerCase());
            proveedor.setTelefono(telefono);
            proveedor.setCorreo(email);
            proveedor.setDireccion(direccion);
            proveedor.setEstado(1); 

            boolean proveedorActualizado = controladorProveedor.actualizar(proveedor);

            if (proveedorActualizado) { 
                JOptionPane.showMessageDialog(null, "Proveedor actualizado correctamente.");
                this.cargarProveedoresEnTabla();
                this.setear();
            } else {
                JOptionPane.showMessageDialog(null, "Error al actualizar el proveedor.");
            }

        } catch (NumberFormatException ex) {
            System.err.println("Error al parsear ID de proveedor: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, "Error: El ID del proveedor no es un número válido.");
        } catch (Exception e) {
            System.err.println("Error inesperado al actualizar proveedor: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error inesperado al actualizar el proveedor.");
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    public static javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTable tableProveedor;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNombreComercial;
    private javax.swing.JTextField txtRuc;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    private void cargarProveedoresEnTabla() {
        DefaultTableModel model = new DefaultTableModel();

        String sql = "SELECT idProveedor, ruc, nombreProveedor, telefonoProveedor, "
                + "correoProveedor, direccionProveedor, estado FROM proveedor";

        try (Connection con = Conexion.conectar(); Statement st = con.createStatement(); ResultSet rs = st.executeQuery(sql)) {

            model.addColumn("ID");
            model.addColumn("RUC");
            model.addColumn("Nombre Comercial");
            model.addColumn("Teléfono");
            model.addColumn("Email");
            model.addColumn("Dirección");
            model.addColumn("Estado");

            while (rs.next()) {
                Object[] fila = new Object[7];
                fila[0] = rs.getInt("idProveedor");
                fila[1] = rs.getString("ruc");
                fila[2] = rs.getString("nombreProveedor");
                fila[3] = rs.getString("telefonoProveedor");
                fila[4] = rs.getString("correoProveedor");
                fila[5] = rs.getString("direccionProveedor");
                fila[6] = rs.getInt("estado") == 1 ? "Activo" : "Inactivo";

                model.addRow(fila);
            }

            tableProveedor.setModel(model);
        } catch (SQLException e) {
            System.err.println("Error al llenar la tabla de proveedores: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al cargar los proveedores: " + e.getMessage());
        }

        tableProveedor.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila = tableProveedor.rowAtPoint(e.getPoint());
                if (fila > -1) {
                    idProveedor = Integer.parseInt(tableProveedor.getValueAt(fila, 0).toString());
                    enviarDatosProveedor(idProveedor);
                }
            }
        });
    }

    private void enviarDatosProveedor(int idProveedor) {
        String sql = "SELECT idProveedor, ruc, nombreProveedor, telefonoProveedor, "
                + "correoProveedor, direccionProveedor, estado FROM proveedor WHERE idProveedor = ?";

        try (Connection con = Conexion.conectar(); PreparedStatement pst = con.prepareStatement(sql)) {

            pst.setInt(1, idProveedor);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                txtRuc.setText(rs.getString("ruc"));
                txtNombreComercial.setText(rs.getString("nombreProveedor"));
                txtTelefono.setText(rs.getString("telefonoProveedor"));
                txtEmail.setText(rs.getString("correoProveedor"));
                txtDireccion.setText(rs.getString("direccionProveedor"));
            }

        } catch (SQLException e) {
            System.err.println("Error al seleccionar proveedor: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al cargar datos del proveedor: " + e.getMessage());
        }
    }

    private boolean validarCampos(String ruc, String telefono) {
        if (txtRuc.getText().isEmpty() || txtNombreComercial.getText().isEmpty() || txtEmail.getText().isEmpty()
                || txtTelefono.getText().isEmpty() || txtDireccion.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.");
            return false;
        }

        if (!ruc.matches("\\d{13}")) {
            JOptionPane.showMessageDialog(null, "El RUC debe tener exactamente 13 caracteres numéricos");
            return false;
        }

        if (!telefono.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(null, "El teléfono debe tener exactamente 10 caracteres numéricos");
            return false;
        }

        return true;
    }

    private void setear() {
        txtRuc.setText("");
        txtNombreComercial.setText("");
        txtTelefono.setText("");
        txtEmail.setText("");
        txtDireccion.setText("");
    }
}
