/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import com.mysql.cj.protocol.Resultset;
import controlador.CategoriaController;
import controlador.ProductoController;
import controlador.ProveedorController;
import dao.Conexion;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Categoria;
import java.util.List;
import javax.swing.JComboBox;
import modelo.Producto;
import modelo.Proveedor;
import java.sql.Statement;
import java.sql.ResultSet;
import javax.swing.JTable;
import static vista.JPanelCategoria.tableCategoria;

/**
 *
 * @author admin
 */
public class JPanelConsultarCliente extends javax.swing.JPanel {

    private Categoria obtenerIdCategoria = new Categoria();
    private Proveedor obtenerIdProveedor = new Proveedor();
    private int idProducto;

    /**
     * Creates new form JPanelCategoriaNuevo
     */
    public JPanelConsultarCliente() {
        initComponents();
        this.setSize(new Dimension(900, 400));

        this.cargarClientesEnTabla();
        this.verificarExistenciaClientes();

        txtBuscador.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyReleased(java.awt.event.KeyEvent e) {
                String texto = txtBuscador.getText().trim();
                if (texto.isEmpty()) {
                    cargarClientesEnTabla();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableCliente = new javax.swing.JTable();
        btnLimpiar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtBuscador = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Consultar Cliente");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, -1, -1));

        jScrollPane3.setPreferredSize(new java.awt.Dimension(450, 80));

        tableCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Apellido", "Rol", "Cedula", "Direccion", "Telefono", "Estado"
            }
        ));
        jScrollPane3.setViewportView(tableCliente);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 840, 260));

        btnLimpiar.setBackground(new java.awt.Color(204, 204, 255));
        btnLimpiar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 60, 90, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buscar.png"))); // NOI18N
        jLabel8.setText("Buscar:");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, -1, 30));

        txtBuscador.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBuscadorKeyPressed(evt);
            }
        });
        add(txtBuscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 530, -1));

        btnBuscar.setBackground(new java.awt.Color(204, 204, 255));
        btnBuscar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 60, 90, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txtBuscador.setText("");
        this.cargarClientesEnTabla();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        this.buscarClientes();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void txtBuscadorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscadorKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.buscarClientes();
        }
    }//GEN-LAST:event_txtBuscadorKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    public static javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTable tableCliente;
    private javax.swing.JTextField txtBuscador;
    // End of variables declaration//GEN-END:variables

    private void cargarClientesEnTabla() {
        Connection con = Conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();

        String sql = "SELECT c.idCliente, CONCAT(u.nombre, ' ', u.apellido) AS nombre_completo, "
                + "r.tipo AS rol, c.cedula, c.direccion, u.telefono, u.estado "
                + "FROM Cliente c "
                + "INNER JOIN Usuario u ON c.idUsuario = u.idUsuario "
                + "INNER JOIN Rol r ON u.idRol = r.idRol "
                + "WHERE u.estado = 1";

        try (Statement st = con.createStatement(); ResultSet rs = st.executeQuery(sql)) {
            model.addColumn("ID");
            model.addColumn("Nombre Completo");
            model.addColumn("Rol");
            model.addColumn("Cédula");
            model.addColumn("Dirección");
            model.addColumn("Teléfono");
            model.addColumn("Estado");

            boolean hayRegistros = false;

            while (rs.next()) {
                hayRegistros = true;
                Object[] fila = new Object[8];
                fila[0] = rs.getInt("idCliente");
                fila[1] = rs.getString("nombre_completo");
                fila[2] = rs.getString("rol");
                fila[3] = rs.getString("cedula");
                fila[4] = rs.getString("direccion");
                fila[5] = rs.getString("telefono");
                fila[6] = (rs.getInt("estado") == 1) ? "Activo" : "Inactivo";
                model.addRow(fila);
            }

            if (!hayRegistros) {
                JOptionPane.showMessageDialog(null, "No existen clientes registrados actualmente.");
            }

            tableCliente.setModel(model);
            jScrollPane3.setViewportView(tableCliente);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cargar clientes: " + e.getMessage());
        }
    }

    private void buscarClientes() {
        String criterio = txtBuscador.getText().trim();

        if (criterio.isEmpty()) {
            cargarClientesEnTabla();
            return;
        }

        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Nombre Completo");
        model.addColumn("Rol");
        model.addColumn("Cédula");
        model.addColumn("Dirección");
        model.addColumn("Teléfono");
        model.addColumn("Estado");

        Connection con = Conexion.conectar();

        String sql = "SELECT c.idCliente, CONCAT(u.nombre, ' ', u.apellido) AS nombre_completo, "
                + "r.tipo AS rol, c.cedula, c.direccion, u.telefono, u.estado "
                + "FROM Cliente c "
                + "INNER JOIN Usuario u ON c.idUsuario = u.idUsuario "
                + "INNER JOIN Rol r ON u.idRol = r.idRol "
                + "WHERE u.estado = 1 AND (u.nombre LIKE ? OR u.apellido LIKE ? OR c.cedula LIKE ?)";

        try (PreparedStatement pst = con.prepareStatement(sql)) {
            String busquedaLike = "%" + criterio + "%";
            pst.setString(1, busquedaLike);
            pst.setString(2, busquedaLike);
            pst.setString(3, busquedaLike);
            ResultSet rs = pst.executeQuery();

            boolean hayResultados = false;

            while (rs.next()) {
                hayResultados = true;
                Object[] fila = new Object[8];
                fila[0] = rs.getInt("idCliente");
                fila[1] = rs.getString("nombre_completo");
                fila[2] = rs.getString("rol");
                fila[3] = rs.getString("cedula");
                fila[4] = rs.getString("direccion");
                fila[5] = rs.getString("telefono");
                fila[6] = (rs.getInt("estado") == 1) ? "Activo" : "Inactivo";
                model.addRow(fila);
            }

            if (hayResultados) {
                tableCliente.setModel(model);
                jScrollPane3.setViewportView(tableCliente);
            } else {
                JOptionPane.showMessageDialog(null, "No se encontraron resultados para la búsqueda");
                cargarClientesEnTabla();
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al buscar clientes: " + e.getMessage());
        }
    }

    private void verificarExistenciaClientes() {
        try (Connection con = Conexion.conectar()) {
            String sql = "SELECT COUNT(*) FROM Cliente c INNER JOIN Usuario u ON c.idUsuario = u.idUsuario WHERE u.estado = 1";
            try (PreparedStatement ps = con.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {
                if (rs.next() && rs.getInt(1) == 0) {
                    JOptionPane.showMessageDialog(null, "No existen clientes en el sistema");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al verificar clientes: " + e.getMessage());
        }
    }
}
