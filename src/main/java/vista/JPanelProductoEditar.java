/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import controlador.ProductoController;
import java.awt.Dimension;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Categoria;
import modelo.Producto;
import modelo.Proveedor;
import java.util.List;

/**
 *
 * @author admin
 */
public class JPanelProductoEditar extends javax.swing.JPanel {

    private ProductoController productoController;
    private int idProducto;

    /**
     * Creates new form JPanelCategoriaNuevo
     */
    public JPanelProductoEditar() {
        initComponents();
        this.setSize(new Dimension(900, 400));

        productoController = new ProductoController();
        this.cargarProveedoresEnComboBox();
        this.cargarCategoriasEnComboBox();
        this.cargarProductosEnTabla();
        this.verificarExistenciaProductos();
    }

    private void cargarCategoriasEnComboBox() {
        List<Categoria> categorias = productoController.obtenerTodasLasCategorias();

        cboxCategoria.removeAllItems();
        cboxCategoria.addItem("Seleccionar categoria");

        for (Categoria cat : categorias) {
            cboxCategoria.addItem(cat.getNombre());
        }
    }

    private void cargarProveedoresEnComboBox() {
        List<Proveedor> proveedores = productoController.obtenerTodosLosProveedores();

        cboxProveedor.removeAllItems();
        cboxProveedor.addItem("Seleccionar proveedor");

        for (Proveedor prov : proveedores) {
            cboxProveedor.addItem(prov.getNombre());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtNombreProducto = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cboxProveedor = new javax.swing.JComboBox<>();
        txtStock = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaDescripcion = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        cboxCategoria = new javax.swing.JComboBox<>();
        btnLimpiar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableProducto = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Actualizar Productos");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Nombre del producto:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Categoria:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 220, -1, -1));

        txtNombreProducto.setEditable(false);
        txtNombreProducto.setEnabled(false);
        add(txtNombreProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 190, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Precio:");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Cantidad en stock:");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Descripción:");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 270, -1, -1));

        cboxProveedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione proveedor", "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(cboxProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 240, 300, -1));
        add(txtStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 190, -1));
        add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 190, -1));

        textAreaDescripcion.setColumns(20);
        textAreaDescripcion.setRows(5);
        jScrollPane2.setViewportView(textAreaDescripcion);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 290, 630, 70));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Proveedor:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 220, -1, -1));

        cboxCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione categoria", "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(cboxCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 240, 310, -1));

        btnLimpiar.setBackground(new java.awt.Color(204, 204, 255));
        btnLimpiar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 20, 90, 30));

        btnActualizar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/editar-producto.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 20, 140, 30));

        jScrollPane4.setPreferredSize(new java.awt.Dimension(450, 80));

        tableProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Proveedor", "Cantidad", "Descripción", "Precio", "Iva", "Categoria", "Estado"
            }
        ));
        jScrollPane4.setViewportView(tableProducto);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 850, 140));
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.setear();
        this.cargarProductosEnTabla();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        String nombreProducto = txtNombreProducto.getText().trim();
        String stockTexto = txtStock.getText().trim();
        String precioTexto = txtPrecio.getText().trim();
        String descripcion = textAreaDescripcion.getText().trim();
        String nombreCategoriaSeleccionada = cboxCategoria.getSelectedItem().toString();
        String nombreProveedorSeleccionado = cboxProveedor.getSelectedItem().toString();
        int estado = 1;
        int iva = 12;

        if (cboxCategoria.getSelectedIndex() == 0 || cboxProveedor.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Campos obligatorios vacíos");
            return;
        }

        String mensaje = productoController.actualizarProducto(nombreProducto, stockTexto, precioTexto, descripcion, nombreCategoriaSeleccionada, nombreProveedorSeleccionado, iva, estado, idProducto);
        JOptionPane.showMessageDialog(this, mensaje);

        if (mensaje.contains("correctamente")) {
            this.setear();
            this.cargarProductosEnTabla();
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JComboBox<String> cboxCategoria;
    private javax.swing.JComboBox<String> cboxProveedor;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JScrollPane jScrollPane4;
    public static javax.swing.JTable tableProducto;
    private javax.swing.JTextArea textAreaDescripcion;
    private javax.swing.JTextField txtNombreProducto;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtStock;
    // End of variables declaration//GEN-END:variables

    private void cargarProductosEnTabla() {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{
            "ID", "Nombre", "Proveedor", "Cantidad", "Descripción", "Precio", "Iva", "Categoría", "Estado"
        });

        List<Producto> productos = productoController.obtenerTodosLosProductos();

        for (Producto p : productos) {
            model.addRow(new Object[]{
                p.getIdProducto(),
                p.getNombreProducto(),
                p.getProveedor(),
                p.getCantidad(),
                p.getDescripcion(),
                p.getPrecio(),
                String.format("%.2f", p.getPorcentajeIva() / 100.0),
                p.getCategoria(),
                (p.getEstado() == 1) ? "Activo" : "Inactivo"
            });
        }

        tableProducto.setModel(model);
        
        tableProducto.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int fila = tableProducto.getSelectedRow();
                if (fila!= -1) {
                    idProducto = Integer.parseInt(tableProducto.getValueAt(fila, 0).toString());
                    enviarDatosProducto(idProducto);
                }
            }
        });
    }
    private void enviarDatosProducto(int idProducto) {
        Producto producto = productoController.obtenerProductoPorId(idProducto);

        if (producto != null) {
            txtNombreProducto.setText(producto.getNombreProducto());
            txtStock.setText(String.valueOf(producto.getCantidad()));
            textAreaDescripcion.setText(producto.getDescripcion());
            txtPrecio.setText(String.valueOf(producto.getPrecio()));

            String nombreCategoria = producto.getCategoria() != null ? producto.getCategoria().getNombre() : null;
            String nombreProveedor = producto.getProveedor() != null ? producto.getProveedor().getNombre() : null;

            if (nombreCategoria != null) {
                cboxCategoria.setSelectedItem(nombreCategoria.trim());
            } else {
                cboxCategoria.setSelectedIndex(0);
            }

            if (nombreProveedor != null) {
                cboxProveedor.setSelectedItem(nombreProveedor.trim());
            } else {
                cboxProveedor.setSelectedIndex(0);
            }

        } else {
            JOptionPane.showMessageDialog(null, "No se encontró el producto seleccionado.");
            setear();
        }
    }

    private void setear() {
        txtNombreProducto.setText("");
        cboxProveedor.setSelectedIndex(0);
        cboxCategoria.setSelectedIndex(0);
        txtPrecio.setText("");
        txtStock.setText("");
        textAreaDescripcion.setText("");
    }
    
    private void verificarExistenciaProductos() {
        ProductoController controller = new ProductoController();
        if (!controller.existenProductosEnSistema()) {
            JOptionPane.showMessageDialog(null, "No existen productos en el sistema.");
        }
    }
}
