/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import controlador.ClienteController;
import java.awt.Dimension;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import modelo.Cliente;

/**
 *
 * @author admin
 */
public class JPanelClienteNuevo extends javax.swing.JPanel {

    /**
     * Creates new form JPanelCategoriaNuevo
     */
    public JPanelClienteNuevo() {
        initComponents();
        this.setSize(new Dimension(900, 400));

        this.cargarClientesEnTabla();
        this.verificarExistenciaClientes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtNombres = new javax.swing.JTextField();
        txtApellidos = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableCliente = new javax.swing.JTable();
        btnLimpiar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        txtCedulaRuc = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Agregar Clientes");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Cédula:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 280, 100, -1));
        add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, 260, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Apellidos:");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 330, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Nombres:");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 280, -1, -1));
        add(txtNombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 300, 270, -1));
        add(txtApellidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 350, 270, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Telefono:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 330, 70, -1));

        jScrollPane3.setPreferredSize(new java.awt.Dimension(450, 80));

        tableCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID cliente", "Cédula", "Nombres", "Apellidos", "Telefono", "Dirección", "Correo", "Estado"
            }
        ));
        jScrollPane3.setViewportView(tableCliente);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 840, 190));

        btnLimpiar.setBackground(new java.awt.Color(204, 204, 255));
        btnLimpiar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 30, 90, 30));

        btnGuardar.setBackground(new java.awt.Color(204, 204, 255));
        btnGuardar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 30, 90, 30));
        add(txtCedulaRuc, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 260, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Email:");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 280, -1, -1));
        add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 300, 270, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("Dirección:");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 330, -1, -1));
        add(txtDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 350, 270, -1));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Permite limpiar o setear los campos de texto del cliente
     *
     * @param evt evento que se realiza cuando se da click al botón
     */
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.setear();
        this.cargarClientesEnTabla();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        Cliente cliente = new Cliente();
        ClienteController clienteController = new ClienteController();

        String cedulaRuc = txtCedulaRuc.getText().trim();
        String nombres = txtNombres.getText().trim();
        String apellidos = txtApellidos.getText().trim();
        String telefono = txtTelefono.getText().trim();
        String email = txtEmail.getText().trim();
        String direccion = txtDireccion.getText().trim();

        if (clienteController.existeClientePorCedula(cedulaRuc)) { 
            JOptionPane.showMessageDialog(null, "El cliente con esa cédula/RUC ya existe.");
            return;
        }

        if (!validarCampos(cedulaRuc, nombres, apellidos, telefono, email, direccion)) {
            return;
        }

        try {
            cliente.setNombre(nombres.substring(0, 1).toUpperCase() + nombres.substring(1).toLowerCase());
            cliente.setApellido(apellidos.substring(0, 1).toUpperCase() + apellidos.substring(1).toLowerCase());
            cliente.setTelefono(telefono);
            cliente.setCorreo(email);
            cliente.setCedula(cedulaRuc); 
            cliente.setDireccion(direccion);
            cliente.setEstado(1);

            if (clienteController.guardarCliente(cliente)) {
                JOptionPane.showMessageDialog(null, "Cliente guardado correctamente.");
                this.cargarClientesEnTabla();
                this.setear();
            } else {
                JOptionPane.showMessageDialog(null, "Error al guardar el cliente.");
            }
        } catch (Exception e) {
            System.out.println("Error inesperado al guardar cliente: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error inesperado al guardar el cliente.");
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    public static javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTable tableCliente;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtCedulaRuc;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNombres;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    private boolean validarCampos(String cedulaRuc, String nombres, String apellidos, String telefono, String email, String direccion) {
        if (cedulaRuc.isEmpty() || nombres.isEmpty() || apellidos.isEmpty() || telefono.isEmpty()
                || email.isEmpty() || direccion.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Todos los campos son obligatorios.");
            return false;
        }

        if (!cedulaRuc.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(null, "La cédula debe ser numérica y de 10 caracteres");
            return false;
        }

        if (!telefono.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(null, "El teléfono debe ser numérica y de 10 caracteres");
            return false;
        }

        if (!email.matches("^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$")) {
            JOptionPane.showMessageDialog(null, "Formato de Email inválido.");
            return false;
        }

        return true;
    }

    private void setear() {
        txtCedulaRuc.setText("");
        txtNombres.setText("");
        txtApellidos.setText("");
        txtTelefono.setText("");
        txtEmail.setText("");
        txtDireccion.setText("");
    }

    private void cargarClientesEnTabla() {
        DefaultTableModel model = new DefaultTableModel();
        ClienteController controller = new ClienteController();

        model.addColumn("ID Cliente");
        model.addColumn("Cédula");
        model.addColumn("Nombres");
        model.addColumn("Apellidos");
        model.addColumn("Teléfono");
        model.addColumn("Dirección");
        model.addColumn("Correo");
        model.addColumn("Estado");

        List<Cliente> clientes = controller.obtenerTodosLosClientes();

        boolean hayRegistros = false;
        if (!clientes.isEmpty()) {
            hayRegistros = true;
            for (Cliente cliente : clientes) {
                Object[] fila = new Object[8];
                fila[0] = cliente.getIdCliente();
                fila[1] = cliente.getCedula();
                fila[2] = cliente.getNombre();
                fila[3] = cliente.getApellido();
                fila[4] = cliente.getTelefono();
                fila[5] = cliente.getDireccion();
                fila[6] = cliente.getCorreo();
                fila[7] = (cliente.getEstado() == 1) ? "Activo" : "Inactivo";
                model.addRow(fila);
            }
        }

        if (!hayRegistros) {
            JOptionPane.showMessageDialog(null, "No existen clientes registrados actualmente.");
        }

        tableCliente.setModel(model);
        jScrollPane3.setViewportView(tableCliente);
    }
    
    
    private void verificarExistenciaClientes() {
        ClienteController controller = new ClienteController();
        if (!controller.existenClientes()) {
            JOptionPane.showMessageDialog(null, "No existen clientes en el sistema.");
        }
    }

}
