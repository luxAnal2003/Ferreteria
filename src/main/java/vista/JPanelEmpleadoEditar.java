/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import dao.EmpleadoDAO;
import dao.UsuarioDAO;
import dao.Conexion;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import java.sql.ResultSet;
import modelo.Empleado;
import modelo.Usuario;

/**
 *
 * @author admin
 */
public class JPanelEmpleadoEditar extends javax.swing.JPanel {

    private int idEmpleado;

    /**
     * Creates new form JPanelCategoriaNuevo
     */
    public JPanelEmpleadoEditar() {
        initComponents();
        this.setSize(new Dimension(900, 400));

        this.cargarEmpleadosEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtNombres = new javax.swing.JTextField();
        txtApellidos = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnLimpiar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        txtCedulaRuc = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtContrasenia = new javax.swing.JPasswordField();
        txtUsuario = new javax.swing.JTextField();
        btnVer = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableEmpleado = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Actualizar Empleados");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Cédula:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, -1, -1));
        add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 300, 190, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Apellidos:");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 330, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Nombres:");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 280, -1, -1));
        add(txtNombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 300, 190, -1));
        add(txtApellidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 350, 190, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Telefono:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 280, -1, -1));

        btnLimpiar.setBackground(new java.awt.Color(204, 204, 255));
        btnLimpiar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 30, 90, 30));

        btnActualizar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/editar-producto.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 30, 140, 30));

        txtCedulaRuc.setEditable(false);
        txtCedulaRuc.setEnabled(false);
        add(txtCedulaRuc, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 190, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Email:");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 330, -1, -1));
        add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 350, 190, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("Dirección:");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, -1, -1));
        add(txtDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 190, -1));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setText("Nombre de usuario:");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 280, -1, -1));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setText("Contraseña:");
        add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 330, -1, -1));
        add(txtContrasenia, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 350, 160, -1));
        add(txtUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 300, 200, -1));

        btnVer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ver.png"))); // NOI18N
        btnVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerActionPerformed(evt);
            }
        });
        add(btnVer, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 350, 30, 20));

        jScrollPane4.setPreferredSize(new java.awt.Dimension(450, 80));

        tableEmpleado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Apellido", "Rol", "Cédula", "Dirección", "Telefono", "Estado"
            }
        ));
        jScrollPane4.setViewportView(tableEmpleado);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 860, 190));
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.setear();
        this.cargarEmpleadosEnTabla();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        Empleado empleado = new Empleado();
        Usuario usuario = new Usuario();
        EmpleadoDAO controladorEmpleado = new EmpleadoDAO();
        UsuarioDAO controladorUsuario = new UsuarioDAO();

        String cedulaRuc = txtCedulaRuc.getText().trim();
        String nombres = txtNombres.getText().trim();
        String apellidos = txtApellidos.getText().trim();
        String telefono = txtTelefono.getText().trim();
        String email = txtEmail.getText().trim();
        String direccion = txtDireccion.getText().trim();
        String nombreUsuario = txtUsuario.getText().trim();
        String contrasenia = new String(txtContrasenia.getPassword()).trim();
        int rol = 2;

        if (!validarCampos(cedulaRuc, nombres, apellidos, telefono, email, direccion, nombreUsuario, contrasenia)) {
            return;
        }

        try {
            int fila = tableEmpleado.getSelectedRow();
            if (fila < 0) {
                JOptionPane.showMessageDialog(null, "Seleccione un empleado para actualizar.");
                return;
            }

            idEmpleado = Integer.parseInt(tableEmpleado.getValueAt(fila, 0).toString());
            int idUsuario = Integer.parseInt(tableEmpleado.getValueAt(fila, 11).toString());

            usuario.setIdUsuario(idUsuario);
            usuario.setNombre(nombres.substring(0, 1).toUpperCase() + nombres.substring(1).toLowerCase());
            usuario.setApellido(apellidos.substring(0, 1).toUpperCase() + apellidos.substring(1).toLowerCase());
            usuario.setTelefono(telefono);
            usuario.setCorreo(email);
            usuario.setUsuario(nombreUsuario);
            usuario.setContrasenia(contrasenia);
            usuario.setIdRol(rol);
            usuario.setEstado(1);

            empleado.setIdEmpleado(idEmpleado);
            empleado.setCedula(cedulaRuc);
            empleado.setDireccion(direccion);
            empleado.setIdRol(rol);
            empleado.setEstado(1);
            empleado.setIdUsuario(idUsuario);

            boolean usuarioActualizado = controladorUsuario.actualizar(usuario);
            boolean empleadoActualizado = controladorEmpleado.actualizar(empleado);

            if (usuarioActualizado && empleadoActualizado) {
                JOptionPane.showMessageDialog(null, "Empleado actualizado correctamente.");
                this.cargarEmpleadosEnTabla();
                this.setear();
            } else {
                JOptionPane.showMessageDialog(null, "Error al actualizar el empleado o usuario.");
            }

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Error: El ID del empleado o usuario no es un número válido.");
            System.err.println("Error al parsear ID: " + ex.getMessage());
        } catch (StringIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Error al procesar nombres/apellidos. Asegúrese de que no estén vacíos.");
            System.err.println("Error de índice de cadena al actualizar empleado: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("Error inesperado al actualizar empleado: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error inesperado al actualizar el empleado.");
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerActionPerformed
        if (txtContrasenia.getEchoChar() != '\u0000') {
            txtContrasenia.setEchoChar((char) 0);
            btnVer.setText("Ocultar");
        } else {
            txtContrasenia.setEchoChar('•');
            btnVer.setText("Mostrar");
        }
    }//GEN-LAST:event_btnVerActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnVer;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    public static javax.swing.JScrollPane jScrollPane4;
    public static javax.swing.JTable tableEmpleado;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtCedulaRuc;
    private javax.swing.JPasswordField txtContrasenia;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNombres;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables

    private void cargarEmpleadosEnTabla() {
        DefaultTableModel model = new DefaultTableModel();

        String sql = "SELECT e.idEmpleado, e.cedula, u.nombre, u.apellido, u.telefono, e.direccion, "
                + "u.correo, u.usuario, u.contrasenia, r.tipo AS rol, u.estado, u.idUsuario "
                + "FROM empleado e "
                + "INNER JOIN usuario u ON e.idUsuario = u.idUsuario "
                + "INNER JOIN rol r ON u.idRol = r.idRol "
                + "WHERE r.idRol = 2";

        try (Connection con = Conexion.conectar(); Statement st = con.createStatement(); ResultSet rs = st.executeQuery(sql)) {

            model.addColumn("ID");
            model.addColumn("Cédula");
            model.addColumn("Nombres");
            model.addColumn("Apellidos");
            model.addColumn("Teléfono");
            model.addColumn("Dirección");
            model.addColumn("Correo");
            model.addColumn("Usuario");
            model.addColumn("Contraseña");
            model.addColumn("Rol");
            model.addColumn("Estado");
            model.addColumn("idUsuario");

            boolean hayRegistros = false;

            while (rs.next()) {
                hayRegistros = true;
                Object[] fila = new Object[12];
                fila[0] = rs.getInt("idEmpleado");
                fila[1] = rs.getString("cedula");
                fila[2] = rs.getString("nombre");
                fila[3] = rs.getString("apellido");
                fila[4] = rs.getString("telefono");
                fila[5] = rs.getString("direccion");
                fila[6] = rs.getString("correo");
                fila[7] = rs.getString("usuario");
                fila[8] = rs.getString("contrasenia");
                fila[9] = rs.getString("rol");
                fila[10] = rs.getInt("estado") == 1 ? "Activo" : "Inactivo";
                fila[11] = rs.getInt("idUsuario");

                model.addRow(fila);
            }

            tableEmpleado.setModel(model);

            if (tableEmpleado.getColumnModel().getColumnCount() > 11) {
                tableEmpleado.getColumnModel().getColumn(11).setMinWidth(0);
                tableEmpleado.getColumnModel().getColumn(11).setMaxWidth(0);
                tableEmpleado.getColumnModel().getColumn(11).setWidth(0);
            }

            jScrollPane4.setViewportView(tableEmpleado);

            if (!hayRegistros) {
                JOptionPane.showMessageDialog(null, "No existen empleados registrados actualmente.");
            }

        } catch (SQLException e) {
            System.err.println("Error al llenar la tabla empleados: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al cargar empleados: " + e.getMessage());
        }

        tableEmpleado.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila = tableEmpleado.rowAtPoint(e.getPoint());
                if (fila > -1) {
                    int idEmpleado = Integer.parseInt(tableEmpleado.getValueAt(fila, 0).toString());
                    enviarDatosEmpleado(idEmpleado);
                }
            }
        });
    }

    private void enviarDatosEmpleado(int idEmpleado) {
        String sql = "SELECT e.idEmpleado, e.cedula, e.direccion, u.idUsuario, u.nombre, u.apellido, "
                + "u.usuario, u.contrasenia, u.telefono, u.correo, r.tipo "
                + "FROM empleado e "
                + "INNER JOIN usuario u ON e.idUsuario = u.idUsuario "
                + "INNER JOIN rol r ON u.idRol = r.idRol "
                + "WHERE e.idEmpleado = ? AND r.idRol = 2";

        try (Connection con = Conexion.conectar(); PreparedStatement pst = con.prepareStatement(sql)) {

            pst.setInt(1, idEmpleado);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                txtCedulaRuc.setText(rs.getString("cedula"));
                txtNombres.setText(rs.getString("nombre"));
                txtApellidos.setText(rs.getString("apellido"));
                txtTelefono.setText(rs.getString("telefono"));
                txtDireccion.setText(rs.getString("direccion"));
                txtEmail.setText(rs.getString("correo"));
                txtUsuario.setText(rs.getString("usuario"));
                txtContrasenia.setText(rs.getString("contrasenia"));
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró el empleado seleccionado o no tiene el rol de empleado.");
            }

        } catch (SQLException e) {
            System.err.println("Error al seleccionar empleado: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al cargar datos del empleado: " + e.getMessage());
        }
    }

    private boolean validarCampos(String cedulaRuc, String nombres, String apellidos, String telefono, String email, String direccion, String nombreUsuario, String contrasenia) {
        if (cedulaRuc.isEmpty() || nombres.isEmpty() || apellidos.isEmpty() || telefono.isEmpty()
                || email.isEmpty() || direccion.isEmpty() || nombreUsuario.isEmpty() || contrasenia.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Todos los campos son obligatorios.");
            return false;
        }

        if (!cedulaRuc.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(null, "La cédula debe ser numérica y de 10 caracteres");
            return false;
        }

        if (!telefono.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(null, "El teléfono debe ser numérica y de 10 caracteres");
            return false;
        }

        if (!email.matches("^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$")) {
            JOptionPane.showMessageDialog(null, "Formato de Email inválido.");
            return false;
        }

        return true;
    }
    
    private void setear() {
        txtCedulaRuc.setText("");
        txtNombres.setText("");
        txtApellidos.setText("");
        txtTelefono.setText("");
        txtEmail.setText("");
        txtDireccion.setText("");
        txtUsuario.setText("");
        txtContrasenia.setText("");
    }
}
