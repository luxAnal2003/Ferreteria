/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import controlador.EmpleadoController;
import controlador.UsuarioController;
import dao.Conexion;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import java.sql.ResultSet;

/**
 *
 * @author admin
 */
public class JPanelEmpleadoEliminar extends javax.swing.JPanel {

    private int idEmpleado;

    /**
     * Creates new form JPanelCategoriaNuevo
     */
    public JPanelEmpleadoEliminar() {
        initComponents();
        this.setSize(new Dimension(900, 400));
//        this.verificarExistenciaEmpleados();
        this.cargarEmpleadosEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        btnActivar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableEmpleado = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Eliminar Empleados");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        btnActivar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnActivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/activar.png"))); // NOI18N
        btnActivar.setText("Activar");
        btnActivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActivarActionPerformed(evt);
            }
        });
        add(btnActivar, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 30, 140, 30));

        btnEliminar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/desactivar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 30, 140, 30));

        jScrollPane4.setPreferredSize(new java.awt.Dimension(450, 80));

        tableEmpleado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Apellido", "Rol", "Cédula", "Dirección", "Telefono", "Estado"
            }
        ));
        jScrollPane4.setViewportView(tableEmpleado);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 860, 310));
    }// </editor-fold>//GEN-END:initComponents

    private void btnActivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActivarActionPerformed
        this.activar();
    }//GEN-LAST:event_btnActivarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int fila = tableEmpleado.getSelectedRow();

        if (fila != -1) {
            String estado = tableEmpleado.getValueAt(fila, 7).toString();
            if (estado.equalsIgnoreCase("Inactivo")) {
                JOptionPane.showMessageDialog(null, "El empleado ya ha sido desactivado anteriormente");
                return;
            }

            idEmpleado = Integer.parseInt(tableEmpleado.getValueAt(fila, 0).toString());
            int idUsuario = Integer.parseInt(tableEmpleado.getValueAt(fila, 8).toString());

            EmpleadoController controlEmpleado = new EmpleadoController();
            UsuarioController controlUsuario = new UsuarioController();

            boolean empleadoDesactivado = controlEmpleado.desactivar(idEmpleado);
            boolean usuarioDesactivado = controlUsuario.desactivar(idUsuario);

            if (empleadoDesactivado && usuarioDesactivado) {
                JOptionPane.showMessageDialog(null, "Empleado desactivado correctamente");
                this.cargarEmpleadosEnTabla();
            } else {
                JOptionPane.showMessageDialog(null, "Error al desactivar el empleado");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un empleado para desactivar");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActivar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JLabel jLabel2;
    public static javax.swing.JScrollPane jScrollPane4;
    public static javax.swing.JTable tableEmpleado;
    // End of variables declaration//GEN-END:variables
    private void cargarEmpleadosEnTabla() {
        DefaultTableModel model = new DefaultTableModel();

        String sql = "SELECT e.idEmpleado, e.cedula, u.nombre, u.apellido, u.telefono, e.direccion, "
                + "u.correo, u.estado, u.idUsuario "
                + "FROM empleado e "
                + "INNER JOIN usuario u ON e.idUsuario = u.idUsuario "
                + "INNER JOIN rol r ON u.idRol = r.idRol "
                + "WHERE r.idRol = 2";

        try (Connection con = Conexion.conectar(); Statement st = con.createStatement(); ResultSet rs = st.executeQuery(sql)) {

            model.addColumn("ID");
            model.addColumn("Cédula");
            model.addColumn("Nombres");
            model.addColumn("Apellidos");
            model.addColumn("Teléfono");
            model.addColumn("Dirección");
            model.addColumn("Correo");
            model.addColumn("Estado");
            model.addColumn("idUsuario");

            boolean hayRegistros = false;

            while (rs.next()) {
                hayRegistros = true;
                Object[] fila = new Object[9];
                fila[0] = rs.getInt("idEmpleado");
                fila[1] = rs.getString("cedula");
                fila[2] = rs.getString("nombre");
                fila[3] = rs.getString("apellido");
                fila[4] = rs.getString("telefono");
                fila[5] = rs.getString("direccion");
                fila[6] = rs.getString("correo");
                fila[7] = rs.getInt("estado") == 1 ? "Activo" : "Inactivo";
                fila[8] = rs.getInt("idUsuario");

                model.addRow(fila);
            }

            tableEmpleado.setModel(model);

            if (tableEmpleado.getColumnModel().getColumnCount() > 8) {
                tableEmpleado.getColumnModel().getColumn(8).setMinWidth(0);
                tableEmpleado.getColumnModel().getColumn(8).setMaxWidth(0);
                tableEmpleado.getColumnModel().getColumn(8).setWidth(0);
            }

            jScrollPane4.setViewportView(tableEmpleado);

            if (!hayRegistros) {
                JOptionPane.showMessageDialog(null, "No existen empleados registrados actualmente.");
            }

        } catch (SQLException e) {
            System.err.println("Error al llenar la tabla empleados: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al cargar empleados: " + e.getMessage());
        }
    }

    private void activar() {
        int fila = tableEmpleado.getSelectedRow();

        if (fila != -1) {
            String estado = tableEmpleado.getValueAt(fila, 7).toString();
            if (estado.equalsIgnoreCase("Activo")) {
                JOptionPane.showMessageDialog(null, "El empleado ya está activo");
                return;
            }

            idEmpleado = Integer.parseInt(tableEmpleado.getValueAt(fila, 0).toString());
            int idUsuario = Integer.parseInt(tableEmpleado.getValueAt(fila, 8).toString());

            EmpleadoController controlEmpleado = new EmpleadoController();
            UsuarioController controlUsuario = new UsuarioController();

            boolean empleadoActivado = controlEmpleado.activar(idEmpleado);
            boolean usuarioActivado = controlUsuario.activar(idUsuario);

            if (empleadoActivado && usuarioActivado) {
                JOptionPane.showMessageDialog(null, "Empleado activado correctamente");
                this.cargarEmpleadosEnTabla();
            } else {
                JOptionPane.showMessageDialog(null, "Error al activar el empleado");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un empleado para activar");
        }
    }
}