/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import controlador.ClienteController;
import dao.Conexion;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import java.sql.ResultSet;

/**
 *
 * @author admin
 */
public class JPanelClienteEliminar extends javax.swing.JPanel {

    private int idCliente;

    /**
     * Creates new form JPanelCategoriaNuevo
     */
    public JPanelClienteEliminar() {
        initComponents();
        this.setSize(new Dimension(900, 400));
        this.verificarExistenciaClientes();
        this.cargarClientesEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableCliente = new javax.swing.JTable();
        btnActivar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Eliminar Clientes");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        jScrollPane3.setPreferredSize(new java.awt.Dimension(450, 80));

        tableCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID cliente", "Cédula", "Nombres", "Apellidos", "Telefono", "Dirección", "Correo", "Estado"
            }
        ));
        jScrollPane3.setViewportView(tableCliente);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 840, 300));

        btnActivar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnActivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/activar.png"))); // NOI18N
        btnActivar.setText("Activar");
        btnActivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActivarActionPerformed(evt);
            }
        });
        add(btnActivar, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 30, 140, 30));

        btnEliminar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/desactivar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 30, 140, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void btnActivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActivarActionPerformed
        this.activar();
    }//GEN-LAST:event_btnActivarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        this.desactivar();
    }//GEN-LAST:event_btnEliminarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActivar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JLabel jLabel2;
    public static javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTable tableCliente;
    // End of variables declaration//GEN-END:variables

    private void cargarClientesEnTabla() {
        Connection con = null;
        DefaultTableModel model = new DefaultTableModel();

        String sql = "SELECT idCliente, cedula, nombre, apellido, telefono, direccion, correo, estado FROM Cliente";

        try {
            con = Conexion.conectar();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            model.addColumn("ID Cliente");
            model.addColumn("Cédula");
            model.addColumn("Nombres");
            model.addColumn("Apellidos");
            model.addColumn("Teléfono");
            model.addColumn("Dirección");
            model.addColumn("Correo");
            model.addColumn("Estado");

            boolean hayRegistros = false;

            while (rs.next()) {
                hayRegistros = true;
                Object[] fila = new Object[8];
                fila[0] = rs.getInt("idCliente");
                fila[1] = rs.getString("cedula");
                fila[2] = rs.getString("nombre");
                fila[3] = rs.getString("apellido");
                fila[4] = rs.getString("telefono");
                fila[5] = rs.getString("direccion");
                fila[6] = rs.getString("correo");
                fila[7] = (rs.getInt("estado") == 1) ? "Activo" : "Inactivo";
                model.addRow(fila);
            }
            if (!hayRegistros) {
                JOptionPane.showMessageDialog(null, "No existen clientes registrados actualmente.");
            }

            tableCliente.setModel(model);
            jScrollPane3.setViewportView(tableCliente);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cargar clientes: " + e.getMessage());
            System.err.println("Error al cargar clientes: " + e.getMessage());
        } finally {
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException e) {
                System.err.println("Error al cerrar conexión: " + e.getMessage());
            }
        }
    }

    private void verificarExistenciaClientes() {
        Connection con = null;
        try {
            con = Conexion.conectar();
            String sql = "SELECT COUNT(*) FROM Cliente";
            try (PreparedStatement ps = con.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {
                if (rs.next() && rs.getInt(1) == 0) {
                    JOptionPane.showMessageDialog(null, "No existen clientes en el sistema.");
                }
            }
        } catch (SQLException e) {
            System.err.println("Error al verificar clientes: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al verificar clientes: " + e.getMessage());
        } finally {
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException e) {
                System.err.println("Error al cerrar conexión: " + e.getMessage());
            }
        }
    }

    private void activar() {
        int fila = tableCliente.getSelectedRow();

        if (fila != -1) {
            String estadoActual = tableCliente.getValueAt(fila, 7).toString();
            if (estadoActual.equalsIgnoreCase("Activo")) {
                JOptionPane.showMessageDialog(null, "El cliente ya está activo.");
                return;
            }

            int idCliente = Integer.parseInt(tableCliente.getValueAt(fila, 0).toString());

            Connection con = null;
            try {
                con = Conexion.conectar();
                String sql = "UPDATE Cliente SET estado = 1 WHERE idCliente = ?";
                try (PreparedStatement pst = con.prepareStatement(sql)) {
                    pst.setInt(1, idCliente);
                    int filasAfectadas = pst.executeUpdate();
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(null, "Cliente activado correctamente.");
                        cargarClientesEnTabla();
                    } else {
                        JOptionPane.showMessageDialog(null, "Error al activar el cliente.");
                    }
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error SQL al activar cliente: " + e.getMessage());
                System.err.println("Error SQL al activar cliente: " + e.getMessage());
            } finally {
                try {
                    if (con != null) {
                        con.close();
                    }
                } catch (SQLException e) {
                    System.err.println("Error al cerrar conexión: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un cliente para activar.");
        }
    }

    /**
     * Desactiva el cliente seleccionado en la tabla (cambia su estado a
     * inactivo).
     */
    private void desactivar() {
        int fila = tableCliente.getSelectedRow();

        if (fila != -1) {
            String estadoActual = tableCliente.getValueAt(fila, 7).toString();
            if (estadoActual.equalsIgnoreCase("Inactivo")) {
                JOptionPane.showMessageDialog(null, "El cliente ya ha sido desactivado.");
                return;
            }

            idCliente = Integer.parseInt(tableCliente.getValueAt(fila, 0).toString());

            ClienteController control = new ClienteController();
            boolean clienteDesactivado = control.desactivar(idCliente);

            if (clienteDesactivado) {
                JOptionPane.showMessageDialog(null, "Cliente desactivado correctamente.");
                this.cargarClientesEnTabla();
            } else {
                JOptionPane.showMessageDialog(null, "Error al desactivar el cliente.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un cliente para desactivar.");
        }
    }
}

