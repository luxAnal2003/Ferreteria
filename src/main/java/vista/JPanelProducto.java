/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import com.mysql.cj.protocol.Resultset;
import controlador.CategoriaController;
import controlador.ProductoController;
import controlador.ProveedorController;
import dao.Conexion;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Categoria;
import java.util.List;
import javax.swing.JComboBox;
import modelo.Producto;
import modelo.Proveedor;
import java.sql.Statement;
import java.sql.ResultSet;
import javax.swing.JTable;

/**
 *
 * @author admin
 */
public class JPanelProducto extends javax.swing.JPanel {

    private Categoria obtenerIdCategoria = new Categoria();
    private Proveedor obtenerIdProveedor = new Proveedor();

    /**
     * Creates new form JPanelCategoriaNuevo
     */
    public JPanelProducto() {
        initComponents();
        this.setSize(new Dimension(900, 400));
        cargarDatosEnComboBox("categoria", "descripcionCategoria", cboxCategoria, "Seleccionar categoria");
        cargarDatosEnComboBox("proveedor", "nombreProveedor", cboxProveedor, "Seleccionar proveedor");

        this.cargarProductosEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtNombreProducto = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cboxProveedor = new javax.swing.JComboBox<>();
        txtStock = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaDescripcion = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        cboxCategoria = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableProducto = new javax.swing.JTable();
        btnLimpiar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Nuevo Producto");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Nombre del producto:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 80, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Categoria:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 130, -1, -1));
        add(txtNombreProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 100, 190, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Precio:");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 180, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Cantidad en stock:");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 180, -1, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Descripción:");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 230, -1, -1));

        cboxProveedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione proveedor", "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(cboxProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 100, 190, -1));
        add(txtStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 200, 190, -1));
        add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 200, 190, -1));

        textAreaDescripcion.setColumns(20);
        textAreaDescripcion.setRows(5);
        jScrollPane2.setViewportView(textAreaDescripcion);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 250, 400, 70));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Proveedor:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 80, -1, -1));

        cboxCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione categoria", "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(cboxCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 150, 400, -1));

        jScrollPane3.setPreferredSize(new java.awt.Dimension(450, 80));

        tableProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Producto", "Proveedor", "Categoría", "Precio", "Stock", "Estado"
            }
        ));
        tableProducto.setPreferredSize(new java.awt.Dimension(450, 80));
        jScrollPane3.setViewportView(tableProducto);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 410, 280));

        btnLimpiar.setBackground(new java.awt.Color(204, 204, 255));
        btnLimpiar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 330, 90, 30));

        btnGuardar.setBackground(new java.awt.Color(204, 204, 255));
        btnGuardar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 330, 90, 30));

        btnActualizar.setBackground(new java.awt.Color(204, 204, 255));
        btnActualizar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 330, 100, 30));

        btnEliminar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/eliminar.png"))); // NOI18N
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 330, 50, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.setear();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        Producto producto = new Producto();
        ProductoController controladorProducto = new ProductoController();

        String nombreProducto = txtNombreProducto.getText().trim();
        String stockTexto = txtStock.getText().trim();
        String precioTexto = txtPrecio.getText().trim();
        String descripcion = textAreaDescripcion.getText().trim();
        String categoria = cboxCategoria.getSelectedItem().toString().trim();
        String proveedor = cboxProveedor.getSelectedItem().toString().trim();

        
        if (nombreProducto.isEmpty() || stockTexto.isEmpty() || precioTexto.isEmpty() || descripcion.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Campos obligatorios vacíos");
            return;
        }

        
        if (!stockTexto.matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "Formato de dato incorrecto.");
            return;
        }

        
        if (!precioTexto.matches("^\\d+(\\.\\d{1,2})?$") && !precioTexto.matches("^\\d+(,\\d{1,2})?$")) {
            JOptionPane.showMessageDialog(null, "Formato de dato incorrecto.");
            return;
        }

        
        if (categoria.equalsIgnoreCase("Seleccione categoria") || proveedor.equalsIgnoreCase("Seleccione proveedor")) {
            JOptionPane.showMessageDialog(null, "Campos obligatorios vacíos");
            return;
        }

        
        if (controladorProducto.existeProducto(nombreProducto)) {
            JOptionPane.showMessageDialog(null, "El producto ya existe");
            return;
        }

        try {
            String nombreFormateado = nombreProducto.substring(0, 1).toUpperCase() + nombreProducto.substring(1).toLowerCase();
            producto.setNombreProducto(nombreFormateado);

            
            producto.setCantidad(Integer.parseInt(stockTexto));

            
            String precioFormateado = precioTexto.replace(",", ".");
            producto.setPrecio(Double.parseDouble(precioFormateado));

            producto.setDescripcion(descripcion);
            producto.setPorcentajeIva(12);
            producto.setEstado(1);

            this.idCategoria();
            producto.setIdCategoria(obtenerIdCategoria);

            this.idProveedor();
            producto.setIdProveedor(obtenerIdProveedor);

            
            if (controladorProducto.guardar(producto)) {
                JOptionPane.showMessageDialog(null, "Producto guardado");

                this.cargarDatosEnComboBox("categoria", "descripcionCategoria", cboxCategoria, "Seleccionar categoria");
                this.cargarDatosEnComboBox("proveedor", "nombreProveedor", cboxProveedor, "Seleccionar proveedor");

                this.cboxProveedor.setSelectedItem("Seleccione proveedor");
                this.cboxCategoria.setSelectedItem("Seleccione categoria");

                this.cargarProductosEnTabla();
                this.setear();
            } else {
                JOptionPane.showMessageDialog(null, "Error al guardar");
            }

        } catch (Exception e) {
            System.out.println("Error al guardar producto: " + e);
            JOptionPane.showMessageDialog(null, "Error inesperado al guardar el producto");
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
//        if (!txtCategoria.getText().isEmpty()) {
//            Categoria categoria = new Categoria();
//            CategoriaController controlCategoria = new CategoriaController();
//
//            String nombreIngresado = txtCategoria.getText().trim();
//            if (!nombreIngresado.isEmpty()) {
//                String nombreFormateado = nombreIngresado.substring(0, 1).toUpperCase() + nombreIngresado.substring(1).toLowerCase();
//                categoria.setNombre(nombreFormateado);
//            }
//            if (controlCategoria.actualizar(categoria, idCategoria)) {
//                JOptionPane.showMessageDialog(null, "Categoria actualizada");
//                txtCategoria.setText("");
//                this.cargarCategoriasEnTabla();
//            } else {
//                JOptionPane.showMessageDialog(null, "Error al actualizar categoria");
//            }
//
//        } else {
//            JOptionPane.showMessageDialog(null, "Seleccione una categoria");
//        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
//        if (!txtCategoria.getText().isEmpty()) {
//            Categoria producto = new Categoria();
//            CategoriaController controlCategoria = new CategoriaController();
//
//            producto.setNombre(txtCategoria.getText());
//            if (!controlCategoria.eliminar(idCategoria)) {
//                JOptionPane.showMessageDialog(null, "Categoria eliminada");
//                txtCategoria.setText("");
//                this.cargarCategoriasEnTabla();
//            } else {
//                JOptionPane.showMessageDialog(null, "Error al eliminar producto");
//            }
//
//        } else {
//            JOptionPane.showMessageDialog(null, "Seleccione una producto");
//        }

    }//GEN-LAST:event_btnEliminarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JComboBox<String> cboxCategoria;
    private javax.swing.JComboBox<String> cboxProveedor;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTable tableProducto;
    private javax.swing.JTextArea textAreaDescripcion;
    private javax.swing.JTextField txtNombreProducto;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtStock;
    // End of variables declaration//GEN-END:variables

    private void cargarDatosEnComboBox(String tabla, String columnaMostrar, JComboBox<String> comboBox, String textoInicial) {
        Connection cn = Conexion.conectar();
        String sql = "SELECT * FROM " + tabla;
        Statement st;

        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            comboBox.removeAllItems();
            comboBox.addItem(textoInicial);

            while (rs.next()) {
                comboBox.addItem(rs.getString(columnaMostrar));
            }

            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al cargar datos de " + tabla + ": " + e);
        }
    }

    private void cargarProductosEnTabla() {
        Connection con = Conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "SELECT p.idProducto, p.nombre, pr.nombreProveedor, p.cantidad, p.descripcion, p.precio, p.iva, c.descripcionCategoria, p.estado "
                + "FROM producto p "
                + "INNER JOIN categoria c ON p.idCategoria = c.idCategoria "
                + "INNER JOIN proveedor pr ON p.idProveedor = pr.idProveedor";
        Statement st;

        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            // Crear tabla y asignar modelo
            JPanelProducto.tableProducto = new JTable(model);
            JPanelProducto.jScrollPane3.setViewportView(JPanelProducto.tableProducto);

            model.addColumn("ID Producto");
            model.addColumn("Nombre");
            model.addColumn("Proveedor");
            model.addColumn("Cantidad");
            model.addColumn("Descripción");
            model.addColumn("Precio");
            model.addColumn("IVA (%)");
            model.addColumn("Categoría");
            model.addColumn("Estado");

            while (rs.next()) {
                Object fila[] = new Object[9];
                fila[0] = rs.getInt("idProducto");
                fila[1] = rs.getString("nombre");
                fila[2] = rs.getString("nombreProveedor");
                fila[3] = rs.getInt("cantidad");
                fila[4] = rs.getString("descripcion");
                fila[5] = rs.getDouble("precio");
                fila[6] = rs.getInt("iva");
                fila[7] = rs.getString("descripcionCategoria");

                int estadoValor = rs.getInt("estado");
                fila[8] = (estadoValor == 1) ? "Activo" : "Inactivo";

                model.addRow(fila);
            }

            con.close();
        } catch (SQLException e) {
            System.out.println("Error al llenar la tabla productos: " + e);
        }

        JPanelProducto.tableProducto.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = JPanelProducto.tableProducto.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    int idProducto = (int) model.getValueAt(fila_point, columna_point);
                    enviarDatosProducto(idProducto);
                }
            }
        });
    }

    private void enviarDatosProducto(int idProducto) {
        try {
            Connection con = Conexion.conectar();
            String sql = "SELECT * FROM producto WHERE idProducto = ?";
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setInt(1, idProducto);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                txtNombreProducto.setText(rs.getString("nombre"));
                txtStock.setText(String.valueOf(rs.getInt("cantidad")));
                textAreaDescripcion.setText(rs.getString("descripcion"));
                txtPrecio.setText(String.valueOf(rs.getDouble("precio")));

//                // Seleccionar categoría en el combo
//                int idCategoria = rs.getInt("idCategoria");
//                seleccionarItemComboBoxPorId(cboxCategoria, idCategoria);
//
//                // Seleccionar proveedor en el combo
//                int idProveedor = rs.getInt("idProveedor");
//                seleccionarItemComboBoxPorId(cboxProveedor, idProveedor);
//
//                int estado = rs.getInt("estado");
//                chkEstado.setSelected(estado == 1);
            }

            con.close();
        } catch (SQLException e) {
            System.out.println("Error al seleccionar producto: " + e);
        }
    }

    private int idCategoria() {
        String sql = "select * from categoria where descripcionCategoria = '" + this.cboxCategoria.getSelectedItem() + "'";
        Statement st;

        try {
            Connection cn = Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                obtenerIdCategoria.setIdCategoria(rs.getInt("idCategoria"));
            }
        } catch (Exception e) {
            System.out.println("Error al obtener id categoria");
        }
        return obtenerIdCategoria.getIdCategoria();
    }

    private int idProveedor() {
        String sql = "SELECT * FROM proveedor WHERE nombreProveedor = '" + this.cboxProveedor.getSelectedItem() + "'";
        Statement st;
        try {
            Connection cn = Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                obtenerIdProveedor.setIdProveedor(rs.getInt("idProveedor"));
            }
        } catch (Exception e) {
            System.out.println("Error al obtener id proveedor: " + e);
        }
        return obtenerIdProveedor.getIdProveedor();
    }

    private void setear() {
        txtNombreProducto.setText("");
        cboxProveedor.setSelectedIndex(0);
        cboxCategoria.setSelectedIndex(0);
        txtPrecio.setText("");
        txtStock.setText("");
        textAreaDescripcion.setText("");
    }
}
