/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import controlador.ClienteController;
import dao.Conexion;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import java.sql.ResultSet;
import modelo.Cliente;

/**
 *
 * @author admin
 */
public class JPanelCliente extends javax.swing.JPanel {

    private int idCliente;

    /**
     * Creates new form JPanelCategoriaNuevo
     */
    public JPanelCliente() {
        initComponents();
        this.setSize(new Dimension(900, 400));

        this.cargarClientesEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtNombres = new javax.swing.JTextField();
        txtApellidos = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableCliente = new javax.swing.JTable();
        btnLimpiar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnActivar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        txtCedulaRuc = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Clientes");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 30, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Cédula/RUC:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));
        add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 240, 300, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Apellidos:");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Nombres:");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, -1));
        add(txtNombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 300, -1));
        add(txtApellidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 300, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Telefono:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 220, -1, -1));

        jScrollPane3.setPreferredSize(new java.awt.Dimension(450, 80));

        tableCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID cliente", "Cédula", "Nombres", "Apellidos", "Telefono", "Dirección", "Correo", "Estado"
            }
        ));
        jScrollPane3.setViewportView(tableCliente);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 690, 140));

        btnLimpiar.setBackground(new java.awt.Color(204, 204, 255));
        btnLimpiar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 260, 90, 30));

        btnGuardar.setBackground(new java.awt.Color(204, 204, 255));
        btnGuardar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 260, 90, 30));

        btnActualizar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/editar-producto.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 160, 140, 30));

        btnActivar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnActivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/activar.png"))); // NOI18N
        btnActivar.setText("Activar");
        btnActivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActivarActionPerformed(evt);
            }
        });
        add(btnActivar, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 80, 140, 30));

        btnEliminar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/desactivar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 120, 140, 30));
        add(txtCedulaRuc, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 300, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Email:");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 270, -1, -1));
        add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 290, 300, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("Dirección:");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 320, -1, -1));
        add(txtDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 340, 410, -1));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Permite limpiar o setear los campos de texto del cliente
     *
     * @param evt evento que se realiza cuando se da click al botón
     */
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.setear();
        this.cargarClientesEnTabla();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    /**
     * Permite guardar un cliente
     *
     * @param evt evento que se realiza cuando se da click al botón
     */
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        Cliente cliente = new Cliente();
        ClienteController controladorCliente = new ClienteController();

        String cedulaRuc = txtCedulaRuc.getText().trim();
        String nombres = txtNombres.getText().trim();
        String apellidos = txtApellidos.getText().trim();
        String telefono = txtTelefono.getText().trim();
        String email = txtEmail.getText().trim();
        String direccion = txtDireccion.getText().trim();

        if (!validarCampos(cedulaRuc, nombres, apellidos, telefono, email, direccion)) {
            return;
        }

        if (controladorCliente.existeCliente(cedulaRuc)) {
            JOptionPane.showMessageDialog(null, "El cliente ya existe");
            return;
        }

        try {
            cliente.setNombre(nombres.substring(0, 1).toUpperCase() + nombres.substring(1).toLowerCase());
            cliente.setApellido(apellidos.substring(0, 1).toUpperCase() + apellidos.substring(1).toLowerCase());
            cliente.setTelefono(telefono);
            cliente.setCorreo(email);
            cliente.setCedula(cedulaRuc);
            cliente.setDireccion(direccion);
            cliente.setEstado(1);

            if (controladorCliente.guardar(cliente)) {
                JOptionPane.showMessageDialog(null, "Cliente guardado correctamente");
                this.cargarClientesEnTabla();
                this.setear();
            } else {
                JOptionPane.showMessageDialog(null, "Error al guardar cliente");
            }
        } catch (Exception e) {
            System.out.println("Error al guardar cliente: " + e);
            JOptionPane.showMessageDialog(null, "Error inesperado al guardar el cliente");
        }

    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        Cliente cliente = new Cliente();
        ClienteController controladorCliente = new ClienteController();

        String cedulaRuc = txtCedulaRuc.getText().trim();
        String nombres = txtNombres.getText().trim();
        String apellidos = txtApellidos.getText().trim();
        String telefono = txtTelefono.getText().trim();
        String email = txtEmail.getText().trim();
        String direccion = txtDireccion.getText().trim();

        if (!validarCampos(cedulaRuc, nombres, apellidos, telefono, email, direccion)) {
            return;
        }

        try {
            int fila = tableCliente.getSelectedRow();
            if (fila < 0) {
                JOptionPane.showMessageDialog(null, "Selecciona un cliente para actualizar");
                return;
            }
            idCliente = Integer.parseInt(tableCliente.getValueAt(fila, 0).toString());

            cliente.setIdCliente(idCliente);
            cliente.setNombre(nombres.substring(0, 1).toUpperCase() + nombres.substring(1).toLowerCase());
            cliente.setApellido(apellidos.substring(0, 1).toUpperCase() + apellidos.substring(1).toLowerCase());
            cliente.setTelefono(telefono);
            cliente.setCorreo(email);
            cliente.setCedula(cedulaRuc);
            cliente.setDireccion(direccion);
            cliente.setEstado(1);

            boolean clienteActualizado = controladorCliente.actualizar(cliente);

            if (clienteActualizado) {
                JOptionPane.showMessageDialog(null, "Cliente actualizado correctamente");
                this.cargarClientesEnTabla();
                this.setear();
            } else {
                JOptionPane.showMessageDialog(null, "Error al actualizar el cliente o usuario");
            }

        } catch (Exception e) {
            System.out.println("Error al actualizar cliente: " + e);
            JOptionPane.showMessageDialog(null, "Error inesperado al actualizar el cliente");
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnActivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActivarActionPerformed
        this.activar();
    }//GEN-LAST:event_btnActivarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int fila = tableCliente.getSelectedRow();
        if (fila != -1) {
            String estado = tableCliente.getValueAt(fila, 7).toString(); 
            if (estado.equalsIgnoreCase("Inactivo")) {
                JOptionPane.showMessageDialog(null, "El cliente ya ha sido desactivado.");
                return;
            }

            idCliente = Integer.parseInt(tableCliente.getValueAt(fila, 0).toString());

            ClienteController control = new ClienteController();

            boolean clienteDesactivado = control.desactivar(idCliente);

            if (clienteDesactivado) {
                JOptionPane.showMessageDialog(null, "Cliente desactivado correctamente.");
                this.setear();
                this.cargarClientesEnTabla();
            } else {
                JOptionPane.showMessageDialog(null, "Error al desactivar el cliente.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un cliente para desactivar.");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActivar;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    public static javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTable tableCliente;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtCedulaRuc;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNombres;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    private void activar() {
        int fila = tableCliente.getSelectedRow();

        if (fila != -1) {
            String estado = tableCliente.getValueAt(fila, 7).toString(); 
            if (estado.equalsIgnoreCase("Activo")) {
                JOptionPane.showMessageDialog(null, "El cliente ya está activo.");
                this.setear();
                return;
            }
            idCliente = Integer.parseInt(tableCliente.getValueAt(fila, 0).toString());

            ClienteController controlCliente = new ClienteController();

            boolean clienteActivado = controlCliente.activar(idCliente);

            if (clienteActivado) {
                JOptionPane.showMessageDialog(null, "Cliente activado correctamente.");
                this.setear();
                this.cargarClientesEnTabla();
            } else {
                JOptionPane.showMessageDialog(null, "Error al activar el cliente.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un cliente para activar.");
        }
    }

    private boolean validarCampos(String cedulaRuc, String nombres, String apellidos, String telefono, String email, String direccion) {
        if (cedulaRuc.isEmpty() || nombres.isEmpty() || apellidos.isEmpty()
                || telefono.isEmpty() || email.isEmpty() || direccion.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.");
            return false;
        }

        if (!cedulaRuc.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(null, "La cédula debe tener exactamente 10 caracteres numéricos");
            return false;
        }

        if (!telefono.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(null, "El teléfono debe tener exactamente 10 caracteres numéricos");
            return false;
        }

        return true;
    }

    private void setear() {
        txtCedulaRuc.setText("");
        txtNombres.setText("");
        txtApellidos.setText("");
        txtTelefono.setText("");
        txtEmail.setText("");
        txtDireccion.setText("");
    }

    private void cargarClientesEnTabla() {
        Connection con = null;
        DefaultTableModel model = new DefaultTableModel();

        String sql = "SELECT idCliente, nombre, apellido, telefono, correo, cedula, direccion, estado "
                + "FROM Cliente"; 

        try {
            con = Conexion.conectar();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            model.addColumn("ID Cliente");
            model.addColumn("Cédula");
            model.addColumn("Nombres");
            model.addColumn("Apellidos");
            model.addColumn("Teléfono");
            model.addColumn("Dirección");
            model.addColumn("Correo");
            model.addColumn("Estado");

            boolean hayRegistros = false;

            while (rs.next()) {
                hayRegistros = true;
                Object[] fila = new Object[8];
                fila[0] = rs.getInt("idCliente");
                fila[1] = rs.getString("cedula");
                fila[2] = rs.getString("nombre");
                fila[3] = rs.getString("apellido");
                fila[4] = rs.getString("telefono");
                fila[5] = rs.getString("direccion");
                fila[6] = rs.getString("correo");
                fila[7] = (rs.getInt("estado") == 1) ? "Activo" : "Inactivo";

                model.addRow(fila);
            }

            if (!hayRegistros) {
                JOptionPane.showMessageDialog(null, "No existen clientes registrados actualmente.");
            }

            tableCliente.setModel(model);
            jScrollPane3.setViewportView(tableCliente);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cargar clientes: " + e.getMessage());
            System.err.println("Error al cargar clientes: " + e.getMessage());
        } finally {
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException e) {
                System.err.println("Error al cerrar conexión: " + e.getMessage());
            }
        }

        tableCliente.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila = tableCliente.rowAtPoint(e.getPoint());
                if (fila > -1) {
                    int idClienteSeleccionado = Integer.parseInt(tableCliente.getValueAt(fila, 0).toString());
                    enviarDatosCliente(idClienteSeleccionado);
                }
            }
        });
    }

    private void enviarDatosCliente(int idCliente) {
        String sql = "SELECT idCliente, nombre, apellido, telefono, correo, cedula, direccion, estado "
                + "FROM Cliente WHERE idCliente = ?";

        try (Connection con = Conexion.conectar(); PreparedStatement pst = con.prepareStatement(sql)) {

            pst.setInt(1, idCliente);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                txtCedulaRuc.setText(rs.getString("cedula"));
                txtNombres.setText(rs.getString("nombre"));
                txtApellidos.setText(rs.getString("apellido"));
                txtTelefono.setText(rs.getString("telefono"));
                txtDireccion.setText(rs.getString("direccion"));
                txtEmail.setText(rs.getString("correo"));
            }

        } catch (SQLException e) {
            System.err.println("Error al seleccionar cliente: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al cargar datos del cliente: " + e.getMessage());
        }
    }
}
