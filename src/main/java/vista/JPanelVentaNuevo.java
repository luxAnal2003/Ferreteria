/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import config.Sesion;
import controlador.ClienteController;
import controlador.EmpleadoController;
import controlador.ProductoController;
import controlador.VentaController;
import dao.ClienteDAO;
import dao.ProductoDAO;
import java.awt.Dimension;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.List;
import modelo.Venta;
import modelo.Cliente;
import modelo.DetalleVenta;
import modelo.Producto;

/**
 *
 * @author admin
 */
public class JPanelVentaNuevo extends javax.swing.JPanel {

    private int idClienteSeleccionado = -1;
    private javax.swing.ButtonGroup grupoFacturacion;
    List<DetalleVenta> lista = new ArrayList<>();
    private DefaultTableModel modeloTabla;

    /**
     * Creates new form JPanelCategoriaNuevo
     */
    public JPanelVentaNuevo() {
        initComponents();
        this.setSize(new Dimension(900, 400));
        grupoFacturacion = new javax.swing.ButtonGroup();
        grupoFacturacion.add(radioButtonSi);
        grupoFacturacion.add(radioButtonNo);

        DefaultTableModel modelo = (DefaultTableModel) tableProducto.getModel();
        modelo.setRowCount(0);
        this.inicializarCamposTotales();
        this.configurarTablaProducto();

        modeloTabla = new DefaultTableModel();
        modeloTabla.setColumnIdentifiers(new String[]{"ID", "Nombre", "Cantidad", "Precio", "Subtotal"});
        tableProducto.setModel(modeloTabla);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtNombres = new javax.swing.JTextField();
        txtApellidos = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnConfirmarVenta = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        txtCedulaRuc = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        radioButtonSi = new javax.swing.JRadioButton();
        radioButtonNo = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        btnBuscar = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtBuscadorProducto = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableProducto = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtSubtotal = new javax.swing.JTextField();
        txtDescuento = new javax.swing.JTextField();
        btnLimpiar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnAumentar = new javax.swing.JButton();
        btnDisminuir = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        txtIva = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Registrar Venta");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("¿Desea facturar con datos?");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        txtTelefono.setEditable(false);
        txtTelefono.setEnabled(false);
        add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 260, 170, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Apellidos:");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Nombres:");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, -1, -1));

        txtNombres.setEditable(false);
        txtNombres.setEnabled(false);
        add(txtNombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 200, 170, -1));

        txtApellidos.setEditable(false);
        txtApellidos.setEnabled(false);
        add(txtApellidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 230, 170, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Total de Venta");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 240, -1, -1));

        btnConfirmarVenta.setBackground(new java.awt.Color(204, 204, 255));
        btnConfirmarVenta.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnConfirmarVenta.setText("Confirmar Venta");
        btnConfirmarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarVentaActionPerformed(evt);
            }
        });
        add(btnConfirmarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 320, 160, 30));

        btnGuardar.setBackground(new java.awt.Color(204, 204, 255));
        btnGuardar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setEnabled(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 350, 110, 30));

        txtCedulaRuc.setEditable(false);
        txtCedulaRuc.setEnabled(false);
        add(txtCedulaRuc, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, 180, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Email:");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, -1, -1));

        txtEmail.setEditable(false);
        txtEmail.setEnabled(false);
        add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 290, 170, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("Dirección:");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, -1, -1));

        txtDireccion.setEditable(false);
        txtDireccion.setEnabled(false);
        add(txtDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 320, 170, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Telefono:");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, -1, -1));

        radioButtonSi.setText("Sí");
        radioButtonSi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonSiActionPerformed(evt);
            }
        });
        add(radioButtonSi, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, -1, -1));

        radioButtonNo.setText("No");
        radioButtonNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonNoActionPerformed(evt);
            }
        });
        add(radioButtonNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 90, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Cédula:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, -1, -1));
        add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 230, 550, 10));

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 60, 10, 310));

        btnBuscar.setBackground(new java.awt.Color(204, 204, 255));
        btnBuscar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buscar.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.setEnabled(false);
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, 120, 30));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Datos del Cliente");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        txtBuscadorProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBuscadorProductoKeyPressed(evt);
            }
        });
        add(txtBuscadorProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 80, 360, -1));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buscar.png"))); // NOI18N
        jLabel14.setText("Buscar:");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 80, -1, 30));

        btnAgregar.setBackground(new java.awt.Color(204, 204, 255));
        btnAgregar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 80, -1, -1));

        jScrollPane3.setPreferredSize(new java.awt.Dimension(450, 80));

        tableProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Producto", "Cantidad", "Precio", "Subtotal"
            }
        ));
        jScrollPane3.setViewportView(tableProducto);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 120, 460, 100));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setText("Productos a Vender");
        add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 60, -1, -1));

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Total a Pagar:");
        add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 350, -1, 20));

        txtTotal.setEditable(false);
        txtTotal.setEnabled(false);
        txtTotal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTotalKeyPressed(evt);
            }
        });
        add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 350, 230, -1));

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel17.setText("Subtotal General:");
        add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 260, -1, 20));

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setText("Descuento:");
        add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 320, -1, 20));

        txtSubtotal.setEditable(false);
        txtSubtotal.setEnabled(false);
        txtSubtotal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSubtotalKeyPressed(evt);
            }
        });
        add(txtSubtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 260, 230, -1));

        txtDescuento.setEditable(false);
        txtDescuento.setEnabled(false);
        txtDescuento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDescuentoKeyPressed(evt);
            }
        });
        add(txtDescuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 320, 230, -1));

        btnLimpiar.setBackground(new java.awt.Color(204, 204, 255));
        btnLimpiar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 280, 160, 30));

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/eliminar.png"))); // NOI18N
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 180, 30, 30));

        btnAumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/nuevo.png"))); // NOI18N
        btnAumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAumentarActionPerformed(evt);
            }
        });
        add(btnAumentar, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 140, 30, 30));

        btnDisminuir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/disminuir.png"))); // NOI18N
        btnDisminuir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisminuirActionPerformed(evt);
            }
        });
        add(btnDisminuir, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 140, 30, 30));

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel19.setText("Iva:");
        add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 290, -1, 20));

        txtIva.setEditable(false);
        txtIva.setEnabled(false);
        txtIva.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIvaKeyPressed(evt);
            }
        });
        add(txtIva, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 290, 230, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarVentaActionPerformed
        this.confirmarVenta();
    }//GEN-LAST:event_btnConfirmarVentaActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        this.guardarClienteNuevo();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String cedula = txtCedulaRuc.getText().trim();
        if (!cedula.isEmpty()) {
            this.buscarClientePorCedula(cedula);
        } else {
            JOptionPane.showMessageDialog(this, "Por favor ingresa una cédula para buscar.");
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void txtBuscadorProductoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscadorProductoKeyPressed

    }//GEN-LAST:event_txtBuscadorProductoKeyPressed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        String nombreProducto = txtBuscadorProducto.getText().trim();

        if (nombreProducto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese un nombre de producto antes de agregar");
            return;
        }
        ProductoController productoController = new ProductoController();

        Producto producto = productoController.obtenerProductoPorNombre(nombreProducto);

        if (producto != null) {
            DefaultTableModel modelo = (DefaultTableModel) tableProducto.getModel();

            for (int i = 0; i < modelo.getRowCount(); i++) {
                String nombreProductoExistente = modelo.getValueAt(i, 1).toString();
                if (nombreProductoExistente.equalsIgnoreCase(producto.getNombreProducto())) {
                    JOptionPane.showMessageDialog(this, "El producto ya ha sido agregado.");
                    return;
                }
            }

            int cantidad = 1;
            agregarProducto(producto, cantidad);
            txtBuscadorProducto.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Producto no encontrado.");
            txtBuscadorProducto.setText("");
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void agregarProducto(Producto producto, int cantidad) {
        double precio = producto.getPrecio();
        double subtotal = cantidad * precio;
        double iva = subtotal * producto.getPorcentajeIva() / 100;
        double descuento = subtotal * 0.005;
        double total = subtotal + iva - descuento;

        DetalleVenta detalle = new DetalleVenta();
        detalle.setIdProducto(producto.getIdProducto());
        detalle.setCantidad(cantidad);
        detalle.setPrecioUnitario(precio);
        detalle.setSubTotal(subtotal);
        detalle.setIva(iva);
        detalle.setDescuento(descuento);
        detalle.setTotalPagar(total);
        detalle.setEstado(1);

        lista.add(detalle);
        modeloTabla.addRow(new Object[]{
            producto.getIdProducto(),
            producto.getNombreProducto(),
            cantidad,
            precio,
            subtotal
        });

        mostrarTotales(lista);
    }

    private void txtTotalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTotalKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalKeyPressed

    private void txtSubtotalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSubtotalKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSubtotalKeyPressed

    private void txtDescuentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescuentoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescuentoKeyPressed

    private void radioButtonSiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonSiActionPerformed
        this.habilitarCampoCedula(true);
    }//GEN-LAST:event_radioButtonSiActionPerformed

    private void radioButtonNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonNoActionPerformed
        this.habilitarCampoCedula(false);
        this.setear();
    }//GEN-LAST:event_radioButtonNoActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.limpiarCamposVenta();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnAumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAumentarActionPerformed
        int filaSeleccionada = tableProducto.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un producto para aumentar la cantidad.");
            return;
        }

        DefaultTableModel modelo = (DefaultTableModel) tableProducto.getModel();

        int idProducto = Integer.parseInt(modelo.getValueAt(filaSeleccionada, 0).toString());

        ProductoDAO controlador = new ProductoDAO();
        Producto producto = controlador.obtenerProductoPorId(idProducto);

        if (producto == null) {
            JOptionPane.showMessageDialog(this, "Producto no encontrado en el sistema.");
            return;
        }

        int cantidadActual = Integer.parseInt(modelo.getValueAt(filaSeleccionada, 2).toString());

        if (cantidadActual >= producto.getCantidad()) {
            JOptionPane.showMessageDialog(this, "No hay suficiente stock");
            return;
        }

        cantidadActual++;

        modelo.setValueAt(cantidadActual, filaSeleccionada, 2);

        double precio = Double.parseDouble(modelo.getValueAt(filaSeleccionada, 3).toString());
        double subtotal = cantidadActual * precio;
        modelo.setValueAt(String.format("%.2f", subtotal), filaSeleccionada, 4);

        for (DetalleVenta detalle : lista) {
            if (detalle.getIdProducto() == idProducto) {
                detalle.setCantidad(cantidadActual);
                detalle.setSubTotal(subtotal);
                double iva = subtotal * producto.getPorcentajeIva() / 100;
                double descuento = subtotal * 0.005;
                double total = subtotal + iva - descuento;
                detalle.setIva(iva);
                detalle.setDescuento(descuento);
                detalle.setTotalPagar(total);
                break;
            }
        }

        this.mostrarTotales(lista);
    }//GEN-LAST:event_btnAumentarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        this.eliminarProductoSeleccionado();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void eliminarProductoSeleccionado() {
        int fila = tableProducto.getSelectedRow();
        if (fila >= 0) {
            modeloTabla.removeRow(fila);
            lista.remove(fila);
            mostrarTotales(lista);
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un producto para eliminar");
        }
    }

    private void btnDisminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisminuirActionPerformed
        int filaSeleccionada = tableProducto.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un producto para disminuir la cantidad.");
            return;
        }

        DefaultTableModel modelo = (DefaultTableModel) tableProducto.getModel();

        int cantidadActual = Integer.parseInt(modelo.getValueAt(filaSeleccionada, 2).toString());

        if (cantidadActual <= 1) {
            JOptionPane.showMessageDialog(this, "Limite alcanzado para disminuir");
            return;
        }

        cantidadActual--;

        int idProducto = Integer.parseInt(modelo.getValueAt(filaSeleccionada, 0).toString());
        double precio = Double.parseDouble(modelo.getValueAt(filaSeleccionada, 3).toString());
        double subtotal = cantidadActual * precio;

        modelo.setValueAt(cantidadActual, filaSeleccionada, 2);
        modelo.setValueAt(String.format("%.2f", subtotal), filaSeleccionada, 4);

        for (DetalleVenta detalle : lista) {
            if (detalle.getIdProducto() == idProducto) {
                detalle.setCantidad(cantidadActual);
                detalle.setSubTotal(subtotal);
                ProductoDAO controlador = new ProductoDAO();
                Producto producto = controlador.obtenerProductoPorId(idProducto);
                double iva = subtotal * producto.getPorcentajeIva() / 100;
                double descuento = subtotal * 0.005;
                double total = subtotal + iva - descuento;
                detalle.setIva(iva);
                detalle.setDescuento(descuento);
                detalle.setTotalPagar(total);
                break;
            }
        }

        this.mostrarTotales(lista);
    }//GEN-LAST:event_btnDisminuirActionPerformed

    private void txtIvaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIvaKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIvaKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnAumentar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnConfirmarVenta;
    private javax.swing.JButton btnDisminuir;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public static javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JRadioButton radioButtonNo;
    private javax.swing.JRadioButton radioButtonSi;
    public static javax.swing.JTable tableProducto;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtBuscadorProducto;
    private javax.swing.JTextField txtCedulaRuc;
    private javax.swing.JTextField txtDescuento;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtIva;
    private javax.swing.JTextField txtNombres;
    private javax.swing.JTextField txtSubtotal;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    private void habilitarCampoCedula(boolean habilitar) {
        txtCedulaRuc.setEnabled(habilitar);
        txtCedulaRuc.setEditable(habilitar);
        btnBuscar.setEnabled(habilitar);
    }

    private void guardarClienteNuevo() {
        Cliente cliente = new Cliente();
        ClienteDAO controladorCliente = new ClienteDAO();

        String cedulaRuc = txtCedulaRuc.getText().trim();
        String nombres = txtNombres.getText().trim();
        String apellidos = txtApellidos.getText().trim();
        String telefono = txtTelefono.getText().trim();
        String email = txtEmail.getText().trim();
        String direccion = txtDireccion.getText().trim();

        if (!validarCampos(cedulaRuc, nombres, apellidos, telefono, email, direccion)) {
            return;
        }

        if (controladorCliente.existeClientePorCedula(cedulaRuc)) {
            JOptionPane.showMessageDialog(null, "El cliente ya existe");
            return;
        }

        try {
            cliente.setNombre(nombres.substring(0, 1).toUpperCase() + nombres.substring(1).toLowerCase());
            cliente.setApellido(apellidos.substring(0, 1).toUpperCase() + apellidos.substring(1).toLowerCase());
            cliente.setTelefono(telefono);
            cliente.setCorreo(email);
            cliente.setCedula(cedulaRuc);
            cliente.setDireccion(direccion);
            cliente.setEstado(1);

            if (controladorCliente.guardar(cliente)) {
                idClienteSeleccionado = controladorCliente.obtenerUltimoIdInsertado();
                JOptionPane.showMessageDialog(null, "Cliente guardado correctamente");
                this.habilitarCamposCliente(false);
            } else {
                JOptionPane.showMessageDialog(null, "Error al guardar cliente");
            }
        } catch (Exception e) {
            System.out.println("Error al guardar cliente: " + e);
            JOptionPane.showMessageDialog(null, "Error inesperado al guardar el cliente");
        }
    }

    private void buscarClientePorCedula(String cedula) {
        if (cedula == null || cedula.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese una cédula o RUC para buscar");
            return;
        }

        if (!cedula.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(this, "La cédula debe tener exactamente 10 caracteres numéricos");
            return;
        }

        ClienteController controller = new ClienteController();
        Cliente cliente = controller.obtenerClientePorCedula(cedula);

        if (cliente != null) {
            idClienteSeleccionado = cliente.getIdCliente();
            txtNombres.setText(cliente.getNombre());
            txtApellidos.setText(cliente.getApellido());
            txtTelefono.setText(cliente.getTelefono());
            txtDireccion.setText(cliente.getDireccion());
            txtEmail.setText(cliente.getCorreo());
            habilitarCamposCliente(false);
        } else {
            JOptionPane.showMessageDialog(this, "Cliente no registrado. Ingrese sus datos.");
            idClienteSeleccionado = -1;
            txtNombres.setText("");
            txtApellidos.setText("");
            txtTelefono.setText("");
            txtEmail.setText("");
            txtDireccion.setText("");
            habilitarCamposCliente(true);
        }
    }

    private void habilitarCamposCliente(boolean habilitar) {
        txtNombres.setEnabled(habilitar);
        txtNombres.setEditable(habilitar);
        txtApellidos.setEnabled(habilitar);
        txtApellidos.setEditable(habilitar);
        txtTelefono.setEnabled(habilitar);
        txtTelefono.setEditable(habilitar);
        txtEmail.setEnabled(habilitar);
        txtEmail.setEditable(habilitar);
        txtDireccion.setEnabled(habilitar);
        txtDireccion.setEditable(habilitar);
        btnGuardar.setEnabled(habilitar);
    }

    public void setear() {
        txtCedulaRuc.setText("");
        txtNombres.setText("");
        txtApellidos.setText("");
        txtTelefono.setText("");
        txtEmail.setText("");
        txtDireccion.setText("");
        radioButtonNo.isSelected();
        radioButtonSi.isSelected();
        txtBuscadorProducto.setText("");
    }

    public void mostrarTotales(List<DetalleVenta> detalles) {
        double subtotalGeneral = 0, ivaTotal = 0, descuentoTotal = 0, totalGeneral = 0;

        for (DetalleVenta detalle : lista) {
            subtotalGeneral += detalle.getSubTotal();
            ivaTotal += detalle.getIva();
            descuentoTotal += detalle.getDescuento();
            totalGeneral += detalle.getTotalPagar();
        }

        txtSubtotal.setText(String.format("%.2f", subtotalGeneral));
        txtIva.setText(String.format("%.2f", ivaTotal));
        txtDescuento.setText(String.format("%.2f", descuentoTotal));
        txtTotal.setText(String.format("%.2f", totalGeneral));
    }

    private void inicializarCamposTotales() {
        txtSubtotal.setText("0.00");
        txtIva.setText("0.00");
        txtDescuento.setText("0.00");
        txtTotal.setText("0.00");
    }
//

    private void confirmarVenta() {
        if (btnConfirmarVenta != null) {
            btnConfirmarVenta.setEnabled(false);
        }

        try {
            if (tableProducto.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "Debe agregar al menos un producto para confirmar la venta.");
                return;
            }

            int idClienteParaVenta; 

            if (radioButtonSi.isSelected()) {
                String cedula = txtCedulaRuc.getText().trim();
                String nombres = txtNombres.getText().trim();
                String apellidos = txtApellidos.getText().trim();
                String telefono = txtTelefono.getText().trim();
                String correo = txtEmail.getText().trim();
                String direccion = txtDireccion.getText().trim();

                if (cedula.isEmpty() || nombres.isEmpty() || apellidos.isEmpty()
                        || telefono.isEmpty() || correo.isEmpty() || direccion.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Debe completar todos los datos del cliente para facturar.");
                    return; 
                }

                if (idClienteSeleccionado == -1) {
                    JOptionPane.showMessageDialog(null, "Debe buscar o registrar un cliente antes de confirmar la venta.");
                    return; 
                }
                idClienteParaVenta = idClienteSeleccionado; 
            } else if (radioButtonNo.isSelected()) {
                idClienteParaVenta = 1;
            } else {
                JOptionPane.showMessageDialog(null, "Debe seleccionar una opción de facturación (Sí o No).");
                return; 
            }

            int idUsuarioLogueado = Sesion.getUsuarioActual().getIdUsuario();
            int idEmpleadoLogueado = -1; 

            EmpleadoController empleadoController = new EmpleadoController();
            try {
                idEmpleadoLogueado = empleadoController.obtenerIdEmp(idUsuarioLogueado);
            } catch (Exception e) {
                System.err.println("Error al obtener idEmpleado para el usuario " + idUsuarioLogueado + ": " + e.getMessage());
                JOptionPane.showMessageDialog(this, "Error interno al obtener datos del empleado. No se puede registrar la venta.");
                return; 
            }

            if (idEmpleadoLogueado == -1) {
                JOptionPane.showMessageDialog(this, "El usuario logueado no está registrado como empleado o el ID de empleado es inválido. No se puede registrar la venta.");
                return; 
            }

            Venta venta = new Venta();
            venta.setIdCliente(idClienteParaVenta);  
            venta.setIdEmpleado(idEmpleadoLogueado); 

            try {
                venta.setTotal(Double.parseDouble(txtTotal.getText().trim()));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "El campo Total no es un número válido.");
                return;
            }

            venta.setEstado(1); 

            List<DetalleVenta> listaDetalles = obtenerDetallesDeTabla();

            VentaController ventaController = new VentaController(); 
            boolean ventaExitosa = ventaController.guardarVentaCompleta(venta, listaDetalles);

            if (ventaExitosa) {
                JOptionPane.showMessageDialog(this, "Venta registrada exitosamente.");
                limpiarCamposVenta(); 
            } else {
                JOptionPane.showMessageDialog(this, "Error al registrar la venta.");
            }

        } catch (Exception e) {
            System.err.println("Error inesperado en confirmarVenta: " + e.getMessage());
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Ocurrió un error inesperado al procesar la venta.");
        } finally {
            if (btnConfirmarVenta != null) {
                btnConfirmarVenta.setEnabled(true);
            }
        }
    }

    public List<DetalleVenta> obtenerDetallesDeTabla() {
        List<DetalleVenta> detalles = new ArrayList<>();
        DefaultTableModel modelo = (DefaultTableModel) tableProducto.getModel();

        for (int i = 0; i < modelo.getRowCount(); i++) {
            try {
                int idProducto = Integer.parseInt(modelo.getValueAt(i, 0).toString());
                int cantidad = Integer.parseInt(modelo.getValueAt(i, 2).toString());
                double precioUnitario = Double.parseDouble(modelo.getValueAt(i, 3).toString());

                
                double subTotal = cantidad * precioUnitario;
                double iva = subTotal * 0.12; 
                double descuento = 0.0; 

                double totalPagar = subTotal + iva - descuento;

                DetalleVenta detalle = new DetalleVenta();
                detalle.setIdProducto(idProducto);
                detalle.setCantidad(cantidad);
                detalle.setPrecioUnitario(precioUnitario);
                detalle.setSubTotal(subTotal);
                detalle.setIva(iva);
                detalle.setDescuento(descuento);
                detalle.setTotalPagar(totalPagar);
                detalle.setEstado(1);

                detalles.add(detalle); 
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Error en el formato numérico de los productos en la tabla: " + ex.getMessage());
                return new ArrayList<>(); 
            } catch (Exception ex) {
                System.err.println("Error al procesar detalle de tabla: " + ex.getMessage());
                return new ArrayList<>();
            }
        }
        return detalles;
    }

    private void limpiarCamposVenta() {
        txtCedulaRuc.setText("");
        txtNombres.setText("");
        txtApellidos.setText("");
        txtTelefono.setText("");
        txtEmail.setText("");
        txtDireccion.setText("");
        txtTotal.setText("0.00");
        idClienteSeleccionado = -1; 
        radioButtonSi.setSelected(false);
        radioButtonNo.setSelected(true); 

        DefaultTableModel modelo = (DefaultTableModel) tableProducto.getModel();
        modelo.setRowCount(0); 
    }

    private void configurarTablaProducto() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Cantidad", "Precio", "Subtotal"});

        tableProducto.setModel(modelo);

        tableProducto.getColumnModel().getColumn(0).setMinWidth(0);
        tableProducto.getColumnModel().getColumn(0).setMaxWidth(0);
        tableProducto.getColumnModel().getColumn(0).setPreferredWidth(0);
    }

    private boolean validarCampos(String cedulaRuc, String nombres, String apellidos, String telefono, String email, String direccion) {
        if (cedulaRuc.isEmpty() || nombres.isEmpty() || apellidos.isEmpty()
                || telefono.isEmpty() || email.isEmpty() || direccion.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.");
            return false;
        }

        if (!cedulaRuc.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(null, "La cédula debe tener exactamente 10 caracteres numéricos");
            return false;
        }

        if (!telefono.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(null, "El teléfono debe tener exactamente 10 caracteres numéricos");
            return false;
        }

        if (!email.matches("^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$")) {
            JOptionPane.showMessageDialog(null, "Formato de Email inválido.");
            return false;
        }

        return true;
    }
}
