/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import controlador.EmpleadoController;
import controlador.UsuarioController;
import dao.Conexion;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Categoria;
import modelo.Proveedor;
import java.sql.Statement;
import java.sql.ResultSet;
import modelo.Empleado;
import modelo.Usuario;

/**
 *
 * @author admin
 */
public class JPanelEmpleado extends javax.swing.JPanel {

    private Categoria obtenerIdCategoria = new Categoria();
    private Proveedor obtenerIdProveedor = new Proveedor();
    private int idEmpleado;

    /**
     * Creates new form JPanelCategoriaNuevo
     */
    public JPanelEmpleado() {
        initComponents();
        this.setSize(new Dimension(900, 400));

        this.cargarEmpleadosEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtNombres = new javax.swing.JTextField();
        txtApellidos = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableEmpleado = new javax.swing.JTable();
        btnLimpiar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnActivar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        txtCedulaRuc = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtContrasenia = new javax.swing.JPasswordField();
        txtUsuario = new javax.swing.JTextField();
        btnVer = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Empleados");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 30, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Cédula/RUC:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));
        add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 240, 190, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Apellidos:");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Nombres:");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, -1));
        add(txtNombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 190, -1));
        add(txtApellidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 190, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Telefono:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 220, -1, -1));

        jScrollPane3.setPreferredSize(new java.awt.Dimension(450, 80));

        tableEmpleado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Producto", "Proveedor", "Categoría", "Precio", "Stock", "Estado"
            }
        ));
        jScrollPane3.setViewportView(tableEmpleado);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 690, 140));

        btnLimpiar.setBackground(new java.awt.Color(204, 204, 255));
        btnLimpiar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 230, 90, 30));

        btnGuardar.setBackground(new java.awt.Color(204, 204, 255));
        btnGuardar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 230, 90, 30));

        btnActualizar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/editar-producto.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 160, 140, 30));

        btnActivar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnActivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/activar.png"))); // NOI18N
        btnActivar.setText("Activar");
        btnActivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActivarActionPerformed(evt);
            }
        });
        add(btnActivar, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 80, 140, 30));

        btnEliminar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/desactivar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 120, 140, 30));
        add(txtCedulaRuc, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 190, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Email:");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 270, -1, -1));
        add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 290, 190, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("Dirección:");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 320, -1, -1));
        add(txtDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 340, 410, -1));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setText("Nombre de usuario:");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 220, -1, -1));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setText("Contraseña:");
        add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 270, -1, -1));
        add(txtContrasenia, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 290, 190, -1));
        add(txtUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 240, 190, -1));

        btnVer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ver.png"))); // NOI18N
        btnVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerActionPerformed(evt);
            }
        });
        add(btnVer, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 291, 30, 20));
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.setear();
        this.cargarEmpleadosEnTabla();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        Empleado empleado = new Empleado();
        Usuario usuario = new Usuario();
        EmpleadoController controladorEmpleado = new EmpleadoController();
        UsuarioController controladorUsuario = new UsuarioController();

        String cedulaRuc = txtCedulaRuc.getText().trim();
        String nombres = txtNombres.getText().trim();
        String apellidos = txtApellidos.getText().trim();
        String telefono = txtTelefono.getText().trim();
        String email = txtEmail.getText().trim();
        String direccion = txtDireccion.getText().trim();
        String nombreUsuario = txtUsuario.getText().trim();
        String contrasenia = new String(txtContrasenia.getPassword()).trim();
        int rol = 2;

        if (cedulaRuc.isEmpty() || nombres.isEmpty() || apellidos.isEmpty() || telefono.isEmpty()
                || email.isEmpty() || direccion.isEmpty() || nombreUsuario.isEmpty() || contrasenia.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Campos obligatorios vacíos");
            return;
        }

        if (!cedulaRuc.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(null, "La cédula debe tener exactamente 10 caracteres numéricos");
            return;
        }

        if (!telefono.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(null, "El teléfono debe tener exactamente 10 caracteres numéricos");
            return;
        }

        if (controladorEmpleado.existeEmpleado(cedulaRuc)) {
            JOptionPane.showMessageDialog(null, "El empleado ya existe");
            return;
        }

        try {

            usuario.setNombre(nombres.substring(0, 1).toUpperCase() + nombres.substring(1).toLowerCase());
            usuario.setApellido(apellidos.substring(0, 1).toUpperCase() + apellidos.substring(1).toLowerCase());
            usuario.setTelefono(telefono);
            usuario.setCorreo(email);
            usuario.setUsuario(nombreUsuario);
            usuario.setContrasenia(contrasenia);
            usuario.setIdRol(rol);
            usuario.setEstado(1);

            int idUsuario = controladorUsuario.guardar(usuario);
            if (idUsuario == -1) {
                JOptionPane.showMessageDialog(null, "Error al guardar usuario");
                return;
            }

            empleado.setCedula(cedulaRuc);
            empleado.setDireccion(direccion);
            empleado.setIdRol(rol);
            empleado.setEstado(1);
            empleado.setIdUsuario(idUsuario);

            if (controladorEmpleado.guardar(empleado)) {
                JOptionPane.showMessageDialog(null, "Empleado guardado correctamente");
                this.cargarEmpleadosEnTabla();
                this.setear();
            } else {
                JOptionPane.showMessageDialog(null, "Error al guardar empleado");
            }
        } catch (Exception e) {
            System.out.println("Error al guardar empleado: " + e);
            JOptionPane.showMessageDialog(null, "Error inesperado al guardar el empleado");
        }

    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        Empleado empleado = new Empleado();
        Usuario usuario = new Usuario();
        EmpleadoController controladorEmpleado = new EmpleadoController();
        UsuarioController controladorUsuario = new UsuarioController();

        String cedulaRuc = txtCedulaRuc.getText().trim();
        String nombres = txtNombres.getText().trim();
        String apellidos = txtApellidos.getText().trim();
        String telefono = txtTelefono.getText().trim();
        String email = txtEmail.getText().trim();
        String direccion = txtDireccion.getText().trim();
        String nombreUsuario = txtUsuario.getText().trim();
        String contrasenia = new String(txtContrasenia.getPassword()).trim();

        if (cedulaRuc.isEmpty() || nombres.isEmpty() || apellidos.isEmpty() || telefono.isEmpty()
                || email.isEmpty() || direccion.isEmpty() || nombreUsuario.isEmpty() || contrasenia.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Campos obligatorios vacíos");
            return;
        }

        if (!cedulaRuc.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(null, "La cédula debe tener exactamente 10 caracteres numéricos");
            return;
        }

        if (!telefono.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(null, "El teléfono debe tener exactamente 10 caracteres numéricos");
            return;
        }

        try {
            int fila = tableEmpleado.getSelectedRow();
            if (fila < 0) {
                JOptionPane.showMessageDialog(null, "Selecciona un empleado para actualizar");
                return;
            }

            idEmpleado = Integer.parseInt(tableEmpleado.getValueAt(fila, 0).toString());
            int idUsuario = Integer.parseInt(tableEmpleado.getValueAt(fila, 11).toString());

            usuario.setIdUsuario(idUsuario);
            usuario.setNombre(nombres.substring(0, 1).toUpperCase() + nombres.substring(1).toLowerCase());
            usuario.setApellido(apellidos.substring(0, 1).toUpperCase() + apellidos.substring(1).toLowerCase());
            usuario.setTelefono(telefono);
            usuario.setCorreo(email);
            usuario.setUsuario(nombreUsuario);
            usuario.setContrasenia(contrasenia);
            usuario.setIdRol(2);
            usuario.setEstado(1);

            empleado.setIdEmpleado(idEmpleado);
            empleado.setCedula(cedulaRuc);
            empleado.setDireccion(direccion);
            empleado.setIdRol(2);
            empleado.setEstado(1);
            empleado.setIdUsuario(idUsuario);

            boolean usuarioActualizado = controladorUsuario.actualizar(usuario);
            boolean empleadoActualizado = controladorEmpleado.actualizar(empleado);

            if (usuarioActualizado && empleadoActualizado) {
                JOptionPane.showMessageDialog(null, "Empleado actualizado correctamente");
                this.cargarEmpleadosEnTabla();
                this.setear();
            } else {
                JOptionPane.showMessageDialog(null, "Error al actualizar el empleado o usuario");
            }

        } catch (Exception e) {
            System.out.println("Error al actualizar empleado: " + e);
            JOptionPane.showMessageDialog(null, "Error inesperado al actualizar el empleado");
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnActivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActivarActionPerformed
        this.activar();
    }//GEN-LAST:event_btnActivarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int fila = tableEmpleado.getSelectedRow();

        if (fila != -1) {
            String estado = tableEmpleado.getValueAt(fila, 10).toString();
            if (estado.equalsIgnoreCase("Inactivo")) {
                JOptionPane.showMessageDialog(null, "El empleado ya ha sido desactivado anteriormente");
                this.setear();
                return;
            }

            idEmpleado = Integer.parseInt(tableEmpleado.getValueAt(fila, 0).toString());
            int idUsuario = Integer.parseInt(tableEmpleado.getValueAt(fila, 11).toString());

            EmpleadoController controlEmpleado = new EmpleadoController();
            UsuarioController controlUsuario = new UsuarioController();

            boolean empleadoDesactivado = controlEmpleado.desactivar(idEmpleado);
            boolean usuarioDesactivado = controlUsuario.desactivar(idUsuario);

            if (empleadoDesactivado && usuarioDesactivado) {
                JOptionPane.showMessageDialog(null, "Empleado desactivado correctamente");
                this.setear();
                this.cargarEmpleadosEnTabla();
            } else {
                JOptionPane.showMessageDialog(null, "Error al desactivar el empleado");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un empleado para desactivar");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerActionPerformed
        if (txtContrasenia.getEchoChar() != '\u0000') {
            txtContrasenia.setEchoChar((char) 0);
            btnVer.setText("Ocultar");
        } else {
            txtContrasenia.setEchoChar('•');
            btnVer.setText("Mostrar");
        }
    }//GEN-LAST:event_btnVerActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActivar;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnVer;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    public static javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTable tableEmpleado;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtCedulaRuc;
    private javax.swing.JPasswordField txtContrasenia;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNombres;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables

    private void cargarEmpleadosEnTabla() {
        DefaultTableModel model = new DefaultTableModel();

        String sql = "SELECT e.idEmpleado, e.cedula, u.nombre, u.apellido, u.telefono, e.direccion, u.correo, u.usuario, u.contrasenia, r.tipo AS rol, e.estado, e.idUsuario "
                + "FROM empleado e "
                + "INNER JOIN usuario u ON e.idUsuario = u.idUsuario "
                + "INNER JOIN rol r ON u.idRol = r.idRol";

        try (Connection con = Conexion.conectar(); Statement st = con.createStatement(); ResultSet rs = st.executeQuery(sql)) {

            model.addColumn("ID");
            model.addColumn("Cédula");
            model.addColumn("Nombres");
            model.addColumn("Apellidos");
            model.addColumn("Teléfono");
            model.addColumn("Dirección");
            model.addColumn("Correo");
            model.addColumn("Usuario");
            model.addColumn("Contraseña");
            model.addColumn("Rol");
            model.addColumn("Estado");
            model.addColumn("idUsuario");

            while (rs.next()) {
                Object[] fila = new Object[12];
                fila[0] = rs.getInt("idEmpleado");
                fila[1] = rs.getString("cedula");
                fila[2] = rs.getString("nombre");
                fila[3] = rs.getString("apellido");
                fila[4] = rs.getString("telefono");
                fila[5] = rs.getString("direccion");
                fila[6] = rs.getString("correo");
                fila[7] = rs.getString("usuario");
                fila[8] = rs.getString("contrasenia");
                fila[9] = rs.getString("rol");
                fila[10] = rs.getInt("estado") == 1 ? "Activo" : "Inactivo";
                fila[11] = rs.getInt("idUsuario");

                model.addRow(fila);
            }

            tableEmpleado.setModel(model);

            tableEmpleado.getColumnModel().getColumn(11).setMinWidth(0);
            tableEmpleado.getColumnModel().getColumn(11).setMaxWidth(0);
            tableEmpleado.getColumnModel().getColumn(11).setWidth(0);

        } catch (SQLException e) {
            System.out.println("Error al llenar la tabla empleados: " + e.getMessage());
        }

        tableEmpleado.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila = tableEmpleado.rowAtPoint(e.getPoint());
                if (fila > -1) {
                    int idEmpleado = Integer.parseInt(tableEmpleado.getValueAt(fila, 0).toString());
                    enviarDatosEmpleado(idEmpleado);
                }
            }
        });
    }

    private void enviarDatosEmpleado(int idEmpleado) {
        String sql = "SELECT e.idEmpleado, e.cedula, e.direccion, u.idUsuario, u.nombre, u.apellido, u.usuario, u.contrasenia, u.telefono, u.correo, r.tipo "
                + "FROM empleado e "
                + "INNER JOIN usuario u ON e.idUsuario = u.idUsuario "
                + "INNER JOIN rol r ON u.idRol = r.idRol "
                + "WHERE e.idEmpleado = ?";

        try (Connection con = Conexion.conectar(); PreparedStatement pst = con.prepareStatement(sql)) {

            pst.setInt(1, idEmpleado);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                txtCedulaRuc.setText(rs.getString("cedula"));
                txtNombres.setText(rs.getString("nombre"));
                txtApellidos.setText(rs.getString("apellido"));
                txtTelefono.setText(rs.getString("telefono"));
                txtDireccion.setText(rs.getString("direccion"));
                txtEmail.setText(rs.getString("correo"));
                txtUsuario.setText(rs.getString("usuario"));
                txtContrasenia.setText(rs.getString("contrasenia"));
            }

        } catch (SQLException e) {
            System.out.println("Error al seleccionar empleado: " + e.getMessage());
        }
    }

    private void activar() {
        int fila = tableEmpleado.getSelectedRow();

        if (fila != -1) {
            String estado = tableEmpleado.getValueAt(fila, 10).toString();
            if (estado.equalsIgnoreCase("Activo")) {
                JOptionPane.showMessageDialog(null, "El empleado ya está activo");
                this.setear();
                return;
            }

            idEmpleado = Integer.parseInt(tableEmpleado.getValueAt(fila, 0).toString());
            int idUsuario = Integer.parseInt(tableEmpleado.getValueAt(fila, 11).toString());

            EmpleadoController controlEmpleado = new EmpleadoController();
            UsuarioController controlUsuario = new UsuarioController();

            boolean empleadoActivado = controlEmpleado.activar(idEmpleado);
            boolean usuarioActivado = controlUsuario.activar(idUsuario);

            if (empleadoActivado && usuarioActivado) {
                JOptionPane.showMessageDialog(null, "Empleado activado correctamente");
                this.setear();
                this.cargarEmpleadosEnTabla();
            } else {
                JOptionPane.showMessageDialog(null, "Error al activar el empleado");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un empleado para activar");
        }
    }

    private boolean validarCampos() {
        if (txtCedulaRuc.getText().isEmpty() || txtNombres.getText().isEmpty() || txtApellidos.getText().isEmpty()
                || txtUsuario.getText().isEmpty() || txtContrasenia.getPassword().length == 0
                || txtTelefono.getText().isEmpty() || txtDireccion.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.");
            return false;
        }
        
        
        return true;
    }

    private void setear() {
        txtCedulaRuc.setText("");
        txtNombres.setText("");
        txtApellidos.setText("");
        txtTelefono.setText("");
        txtEmail.setText("");
        txtDireccion.setText("");
        txtUsuario.setText("");
        txtContrasenia.setText("");
    }
}
