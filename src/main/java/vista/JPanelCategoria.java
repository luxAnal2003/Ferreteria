/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import controlador.CategoriaController;
import java.awt.Dimension;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Categoria;

/**
 *
 * @author admin
 */
public class JPanelCategoria extends javax.swing.JPanel {

    private int idCategoria;

    /**
     * Creates new form JPanelCategoria
     */
    public JPanelCategoria() {
        initComponents();
        this.setSize(new Dimension(900, 400));
        this.cargarCategoriasEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCategoria = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        txtCategoria = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnLimpiar = new javax.swing.JButton();
        btnEliminar1 = new javax.swing.JButton();
        btnActivar = new javax.swing.JButton();
        btnActualizar1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Categoria");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 30, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableCategoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Categoria", "Estado"
            }
        ));
        jScrollPane1.setViewportView(tableCategoria);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 410, 290));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 410, 290));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Tipo de categoria:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 240, -1, -1));
        add(txtCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 260, 400, -1));

        btnGuardar.setBackground(new java.awt.Color(204, 204, 255));
        btnGuardar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 310, 90, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/añadir-Categoria.png"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 90, -1, -1));

        btnLimpiar.setBackground(new java.awt.Color(204, 204, 255));
        btnLimpiar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 310, 90, 30));

        btnEliminar1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEliminar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/desactivar.png"))); // NOI18N
        btnEliminar1.setText("Eliminar");
        btnEliminar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminar1ActionPerformed(evt);
            }
        });
        add(btnEliminar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 140, 140, 30));

        btnActivar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnActivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/activar.png"))); // NOI18N
        btnActivar.setText("Activar");
        btnActivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActivarActionPerformed(evt);
            }
        });
        add(btnActivar, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 100, 140, 30));

        btnActualizar1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnActualizar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/editar-producto.png"))); // NOI18N
        btnActualizar1.setText("Actualizar");
        btnActualizar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizar1ActionPerformed(evt);
            }
        });
        add(btnActualizar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 180, 140, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        Categoria categoria = new Categoria();
        CategoriaController categoriaController = new CategoriaController();

        String nombreCategoria = txtCategoria.getText().trim();

        if (nombreCategoria.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Complete el campo de categoría.");
            return;
        }

        if (categoriaController.existeCategoriaPorDescripcion(nombreCategoria)) {
            JOptionPane.showMessageDialog(null, "La categoría ya existe.");
            return;
        }

        try {
            String nombreFormateado = nombreCategoria.substring(0, 1).toUpperCase() + nombreCategoria.substring(1).toLowerCase();
            categoria.setNombre(nombreFormateado);
            categoria.setEstado(1);

            if (categoriaController.guardarCategoria(categoria)) {
                JOptionPane.showMessageDialog(null, "Categoría guardada correctamente.");
                this.cargarCategoriasEnTabla();
                txtCategoria.setText("");
                idCategoria = 0;
            } else {
                JOptionPane.showMessageDialog(null, "Error al guardar la categoría.");
            }
        } catch (Exception e) {
            System.err.println("Error inesperado al guardar categoría: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error inesperado al guardar la categoría.");
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txtCategoria.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnEliminar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminar1ActionPerformed
        int fila = tableCategoria.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione una categoría para desactivar.");
            return;
        }

        idCategoria = Integer.parseInt(tableCategoria.getValueAt(fila, 0).toString());
        String estadoActual = tableCategoria.getValueAt(fila, 2).toString();

        if (estadoActual.equalsIgnoreCase("Inactivo")) {
            JOptionPane.showMessageDialog(null, "La categoría ya ha sido desactivada.");
            return;
        }

        CategoriaController categoriaController = new CategoriaController();
        if (categoriaController.desactivarCategoria(idCategoria)) {
            JOptionPane.showMessageDialog(null, "Categoría desactivada correctamente.");
            txtCategoria.setText("");
            idCategoria = 0;
            this.cargarCategoriasEnTabla();
        } else {
            JOptionPane.showMessageDialog(null, "Error al desactivar la categoría.");
        }
    }//GEN-LAST:event_btnEliminar1ActionPerformed

    private void btnActivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActivarActionPerformed
        int fila = tableCategoria.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione una categoría para activar.");
            return;
        }

        idCategoria = Integer.parseInt(tableCategoria.getValueAt(fila, 0).toString());
        String estadoActual = tableCategoria.getValueAt(fila, 2).toString();

        if (estadoActual.equalsIgnoreCase("Activo")) {
            JOptionPane.showMessageDialog(null, "La categoría ya está activa.");
            txtCategoria.setText("");
            idCategoria = 0;
            return;
        }

        CategoriaController categoriaController = new CategoriaController();
        if (categoriaController.activarCategoria(idCategoria)) {
            JOptionPane.showMessageDialog(null, "Categoría activada correctamente.");
            txtCategoria.setText("");
            this.cargarCategoriasEnTabla();
        } else {
            JOptionPane.showMessageDialog(null, "Error al activar la categoría.");
        }
    }//GEN-LAST:event_btnActivarActionPerformed

    private void btnActualizar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizar1ActionPerformed
        if (!txtCategoria.getText().isEmpty()) {
            Categoria categoria = new Categoria();
            CategoriaController categoriaController = new CategoriaController();

            String nombreIngresado = txtCategoria.getText().trim();
            if (!nombreIngresado.isEmpty()) {
                String nombreFormateado = nombreIngresado.substring(0, 1).toUpperCase() + nombreIngresado.substring(1).toLowerCase();
                categoria.setNombre(nombreFormateado);
            }
            if (categoriaController.actualizarCategoria(categoria, idCategoria)) {
                JOptionPane.showMessageDialog(null, "Categoria actualizada");
                txtCategoria.setText("");
                this.cargarCategoriasEnTabla();
            } else {
                JOptionPane.showMessageDialog(null, "Error al actualizar categoria");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Seleccione una categoria");
        }
    }//GEN-LAST:event_btnActualizar1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActivar;
    private javax.swing.JButton btnActualizar1;
    private javax.swing.JButton btnEliminar1;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable tableCategoria;
    private javax.swing.JTextField txtCategoria;
    // End of variables declaration//GEN-END:variables

    private void cargarCategoriasEnTabla() {
        DefaultTableModel model = new DefaultTableModel();
        CategoriaController controller = new CategoriaController();

        model.addColumn("IdCategoria");
        model.addColumn("Descripcion");
        model.addColumn("Estado");

        List<Categoria> categorias = controller.obtenerTodasLasCategorias();

        boolean hayRegistros = false;
        if (!categorias.isEmpty()) {
            hayRegistros = true;
            for (Categoria categoria : categorias) {
                Object[] fila = new Object[3];
                fila[0] = categoria.getIdCategoria();
                fila[1] = categoria.getNombre();
                fila[2] = (categoria.getEstado() == 1) ? "Activo" : "Inactivo";
                model.addRow(fila);
            }
        }

        tableCategoria.setModel(model);
        jScrollPane1.setViewportView(tableCategoria);

        if (!hayRegistros) {
            JOptionPane.showMessageDialog(null, "No existen categorías registradas actualmente.");
        }

        tableCategoria.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int filaSeleccionada = tableCategoria.getSelectedRow();
                if (filaSeleccionada != -1) {
                    int id = (int) tableCategoria.getValueAt(filaSeleccionada, 0);
                    idCategoria = id;
                    enviarDatosCategoria(id);
                }
            }
        });

    }

    private void enviarDatosCategoria(int idCategoria) {
        CategoriaController controller = new CategoriaController();
        Categoria categoria = controller.obtenerCategoriaPorId(idCategoria);

        if (categoria != null) {
            txtCategoria.setText(categoria.getNombre());
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró la categoría seleccionada.");
            txtCategoria.setText("");
        }
    }
}
